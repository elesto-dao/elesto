// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credentials/v1/credentials.proto

package credentials

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredentialIssuer struct {
	// the did of the issuer
	Did string `protobuf:"bytes,1,opt,name=did,proto3" json:"did,omitempty"`
	// the list of the credential that this issuer issues
	Issues []*CredentialIssuance `protobuf:"bytes,3,rep,name=issues,proto3" json:"issues,omitempty"`
	// the list of off-chain credentials that this issuer accepts
	Accepts []*CredentialConstraint `protobuf:"bytes,4,rep,name=accepts,proto3" json:"accepts,omitempty"`
}

func (m *CredentialIssuer) Reset()         { *m = CredentialIssuer{} }
func (m *CredentialIssuer) String() string { return proto.CompactTextString(m) }
func (*CredentialIssuer) ProtoMessage()    {}
func (*CredentialIssuer) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc5d85b2b80c68f8, []int{0}
}
func (m *CredentialIssuer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialIssuer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialIssuer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialIssuer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialIssuer.Merge(m, src)
}
func (m *CredentialIssuer) XXX_Size() int {
	return m.Size()
}
func (m *CredentialIssuer) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialIssuer.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialIssuer proto.InternalMessageInfo

func (m *CredentialIssuer) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *CredentialIssuer) GetIssues() []*CredentialIssuance {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *CredentialIssuer) GetAccepts() []*CredentialConstraint {
	if m != nil {
		return m.Accepts
	}
	return nil
}

type CredentialIssuance struct {
	// the did of the credential definition
	CredentialDefinition string `protobuf:"bytes,1,opt,name=credentialDefinition,proto3" json:"credentialDefinition,omitempty"`
	// the constraints required for issuing the credential
	Requirements []*CredentialConstraint `protobuf:"bytes,2,rep,name=requirements,proto3" json:"requirements,omitempty"`
}

func (m *CredentialIssuance) Reset()         { *m = CredentialIssuance{} }
func (m *CredentialIssuance) String() string { return proto.CompactTextString(m) }
func (*CredentialIssuance) ProtoMessage()    {}
func (*CredentialIssuance) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc5d85b2b80c68f8, []int{1}
}
func (m *CredentialIssuance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialIssuance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialIssuance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialIssuance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialIssuance.Merge(m, src)
}
func (m *CredentialIssuance) XXX_Size() int {
	return m.Size()
}
func (m *CredentialIssuance) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialIssuance.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialIssuance proto.InternalMessageInfo

func (m *CredentialIssuance) GetCredentialDefinition() string {
	if m != nil {
		return m.CredentialDefinition
	}
	return ""
}

func (m *CredentialIssuance) GetRequirements() []*CredentialConstraint {
	if m != nil {
		return m.Requirements
	}
	return nil
}

type CredentialConstraint struct {
	// id of the required credential
	RequireCredentialDefinition string `protobuf:"bytes,1,opt,name=requireCredentialDefinition,proto3" json:"requireCredentialDefinition,omitempty"`
	// id of the issuer that must be the issuer of the credential
	FromIssuer string `protobuf:"bytes,2,opt,name=fromIssuer,proto3" json:"fromIssuer,omitempty"`
}

func (m *CredentialConstraint) Reset()         { *m = CredentialConstraint{} }
func (m *CredentialConstraint) String() string { return proto.CompactTextString(m) }
func (*CredentialConstraint) ProtoMessage()    {}
func (*CredentialConstraint) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc5d85b2b80c68f8, []int{2}
}
func (m *CredentialConstraint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialConstraint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialConstraint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialConstraint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialConstraint.Merge(m, src)
}
func (m *CredentialConstraint) XXX_Size() int {
	return m.Size()
}
func (m *CredentialConstraint) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialConstraint.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialConstraint proto.InternalMessageInfo

func (m *CredentialConstraint) GetRequireCredentialDefinition() string {
	if m != nil {
		return m.RequireCredentialDefinition
	}
	return ""
}

func (m *CredentialConstraint) GetFromIssuer() string {
	if m != nil {
		return m.FromIssuer
	}
	return ""
}

type CredentialDefinition struct {
	// the credential definition did
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the did of the publisher of the credential
	PublisherId string `protobuf:"bytes,2,opt,name=publisherId,proto3" json:"publisherId,omitempty"`
	// the credential json-ld schema
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// the credential vocabulary
	Vocab string `protobuf:"bytes,4,opt,name=vocab,proto3" json:"vocab,omitempty"`
	// the human readable name of the credential
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// the description of the credential, such as it's purpose
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// wherever the credential is intended for public use (on-chain) or not (off-chain)
	// if the value is false then the module will forbid the issuance of the credential on chain
	IsPublic bool `protobuf:"varint,7,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	// did of the credential should not be used anymore in favour of something else
	SupersededBy string `protobuf:"bytes,11,opt,name=supersededBy,proto3" json:"supersededBy,omitempty"`
	// the credential can be de-activated
	IsActive bool `protobuf:"varint,12,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (m *CredentialDefinition) Reset()         { *m = CredentialDefinition{} }
func (m *CredentialDefinition) String() string { return proto.CompactTextString(m) }
func (*CredentialDefinition) ProtoMessage()    {}
func (*CredentialDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc5d85b2b80c68f8, []int{3}
}
func (m *CredentialDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialDefinition.Merge(m, src)
}
func (m *CredentialDefinition) XXX_Size() int {
	return m.Size()
}
func (m *CredentialDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialDefinition proto.InternalMessageInfo

func (m *CredentialDefinition) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CredentialDefinition) GetPublisherId() string {
	if m != nil {
		return m.PublisherId
	}
	return ""
}

func (m *CredentialDefinition) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

func (m *CredentialDefinition) GetVocab() string {
	if m != nil {
		return m.Vocab
	}
	return ""
}

func (m *CredentialDefinition) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CredentialDefinition) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CredentialDefinition) GetIsPublic() bool {
	if m != nil {
		return m.IsPublic
	}
	return false
}

func (m *CredentialDefinition) GetSupersededBy() string {
	if m != nil {
		return m.SupersededBy
	}
	return ""
}

func (m *CredentialDefinition) GetIsActive() bool {
	if m != nil {
		return m.IsActive
	}
	return false
}

// DidMetadata defines metadata associated to a did document such as
// the status of the DID document
type PublicVerifiableCredential struct {
	// the credential id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the definition
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// the
	Issuer string `protobuf:"bytes,3,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// the subject of the credential
	Subject []*types.Any `protobuf:"bytes,4,rep,name=subject,proto3" json:"subject,omitempty"`
	// the date-time of issuance
	IssuedOn *time.Time `protobuf:"bytes,5,opt,name=issuedOn,proto3,stdtime" json:"issuedOn,omitempty"`
	// the date-time of expiration
	ExpiresOn *time.Time `protobuf:"bytes,6,opt,name=expiresOn,proto3,stdtime" json:"expiresOn,omitempty"`
}

func (m *PublicVerifiableCredential) Reset()         { *m = PublicVerifiableCredential{} }
func (m *PublicVerifiableCredential) String() string { return proto.CompactTextString(m) }
func (*PublicVerifiableCredential) ProtoMessage()    {}
func (*PublicVerifiableCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_bc5d85b2b80c68f8, []int{4}
}
func (m *PublicVerifiableCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicVerifiableCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicVerifiableCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicVerifiableCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicVerifiableCredential.Merge(m, src)
}
func (m *PublicVerifiableCredential) XXX_Size() int {
	return m.Size()
}
func (m *PublicVerifiableCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicVerifiableCredential.DiscardUnknown(m)
}

var xxx_messageInfo_PublicVerifiableCredential proto.InternalMessageInfo

func init() {
	proto.RegisterType((*CredentialIssuer)(nil), "elestodao.elesto.credentials.v1.CredentialIssuer")
	proto.RegisterType((*CredentialIssuance)(nil), "elestodao.elesto.credentials.v1.CredentialIssuance")
	proto.RegisterType((*CredentialConstraint)(nil), "elestodao.elesto.credentials.v1.CredentialConstraint")
	proto.RegisterType((*CredentialDefinition)(nil), "elestodao.elesto.credentials.v1.CredentialDefinition")
	proto.RegisterType((*PublicVerifiableCredential)(nil), "elestodao.elesto.credentials.v1.PublicVerifiableCredential")
}

func init() { proto.RegisterFile("credentials/v1/credentials.proto", fileDescriptor_bc5d85b2b80c68f8) }

var fileDescriptor_bc5d85b2b80c68f8 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xcd, 0x6a, 0xdb, 0x4c,
	0x14, 0xb5, 0x6c, 0xc7, 0x49, 0xae, 0xc3, 0x47, 0x18, 0xcc, 0x87, 0xea, 0x82, 0x6c, 0xb4, 0x0a,
	0x85, 0x4a, 0x24, 0xa1, 0x9b, 0x52, 0x4a, 0xf3, 0xb3, 0x09, 0x5d, 0xa4, 0x88, 0x52, 0x68, 0x77,
	0x23, 0xcd, 0xb5, 0x33, 0xc5, 0xd2, 0xa8, 0x33, 0x23, 0x93, 0xbc, 0x41, 0x96, 0x79, 0x80, 0x2e,
	0x02, 0x7d, 0x93, 0xae, 0xba, 0xcc, 0xb2, 0xbb, 0x96, 0x64, 0xd3, 0xc7, 0x28, 0x9a, 0x91, 0x6d,
	0xa5, 0x4e, 0xff, 0xe8, 0xee, 0xfe, 0x9c, 0x73, 0xee, 0xd5, 0x19, 0x5f, 0xc3, 0x30, 0x91, 0xc8,
	0x30, 0xd3, 0x9c, 0x4e, 0x54, 0x38, 0xdd, 0x0e, 0x6b, 0x69, 0x90, 0x4b, 0xa1, 0x05, 0x19, 0xe0,
	0x04, 0x95, 0x16, 0x8c, 0x8a, 0xc0, 0x46, 0x41, 0x1d, 0x33, 0xdd, 0xee, 0xf7, 0xc6, 0x62, 0x2c,
	0x0c, 0x36, 0x2c, 0x23, 0x4b, 0xeb, 0x0f, 0xc6, 0x42, 0x8c, 0x27, 0x18, 0x9a, 0x2c, 0x2e, 0x46,
	0xa1, 0xe6, 0x29, 0x2a, 0x4d, 0xd3, 0xbc, 0x02, 0xdc, 0xfb, 0x11, 0x40, 0xb3, 0x33, 0xdb, 0xf2,
	0x3f, 0x3a, 0xb0, 0x79, 0x30, 0x1f, 0x72, 0xa4, 0x54, 0x81, 0x92, 0x6c, 0x42, 0x8b, 0x71, 0xe6,
	0x3a, 0x43, 0x67, 0x6b, 0x3d, 0x2a, 0x43, 0xf2, 0x1c, 0x3a, 0xbc, 0xec, 0x29, 0xb7, 0x35, 0x6c,
	0x6d, 0x75, 0x77, 0x76, 0x83, 0xdf, 0xac, 0x1a, 0xdc, 0x16, 0xa5, 0x59, 0x82, 0x51, 0x25, 0x41,
	0x8e, 0x61, 0x95, 0x26, 0x09, 0xe6, 0x5a, 0xb9, 0x6d, 0xa3, 0xf6, 0xe8, 0x2f, 0xd4, 0x0e, 0x44,
	0xa6, 0xb4, 0xa4, 0x3c, 0xd3, 0xd1, 0x4c, 0xc5, 0xff, 0xe0, 0x00, 0x59, 0x9e, 0x47, 0x76, 0xa0,
	0xb7, 0x90, 0x39, 0xc4, 0x11, 0xcf, 0xb8, 0xe6, 0x22, 0xab, 0xbe, 0xeb, 0xce, 0x1e, 0x79, 0x0d,
	0x1b, 0x12, 0xdf, 0x15, 0x5c, 0x62, 0x8a, 0x99, 0x56, 0x6e, 0xf3, 0x5f, 0x16, 0xbc, 0x25, 0xe5,
	0x9f, 0x42, 0xef, 0x2e, 0x14, 0x79, 0x06, 0xf7, 0x2b, 0xdc, 0xc1, 0xcf, 0xb7, 0xfd, 0x15, 0x84,
	0x78, 0x00, 0x23, 0x29, 0x52, 0xfb, 0x7a, 0x6e, 0xd3, 0x10, 0x6a, 0x15, 0xff, 0xbc, 0x59, 0x1f,
	0x5d, 0x23, 0xfe, 0x07, 0xcd, 0xf9, 0x3b, 0x37, 0x39, 0x23, 0x43, 0xe8, 0xe6, 0x45, 0x3c, 0xe1,
	0xea, 0x04, 0xe5, 0x11, 0xab, 0x94, 0xea, 0x25, 0xf2, 0x3f, 0x74, 0x54, 0x72, 0x82, 0x29, 0x75,
	0x5b, 0xa6, 0x59, 0x65, 0xa4, 0x07, 0x2b, 0x53, 0x91, 0xd0, 0xd8, 0x6d, 0x9b, 0xb2, 0x4d, 0x08,
	0x81, 0x76, 0x46, 0x53, 0x74, 0x57, 0x4c, 0xd1, 0xc4, 0xe5, 0x0c, 0x86, 0x2a, 0x91, 0x3c, 0x37,
	0x9f, 0xd7, 0xb1, 0x33, 0x6a, 0x25, 0xd2, 0x87, 0x35, 0xae, 0x5e, 0x94, 0x43, 0x13, 0x77, 0x75,
	0xe8, 0x6c, 0xad, 0x45, 0xf3, 0x9c, 0xf8, 0xb0, 0xa1, 0x8a, 0x1c, 0xa5, 0x42, 0x86, 0x6c, 0xff,
	0xcc, 0xed, 0x1a, 0xfa, 0xad, 0x9a, 0xe5, 0xef, 0x25, 0x9a, 0x4f, 0xd1, 0xdd, 0x98, 0xf1, 0x6d,
	0xee, 0xbf, 0x6f, 0x42, 0xdf, 0x4a, 0xbd, 0x42, 0xc9, 0x47, 0x9c, 0xc6, 0x93, 0x9a, 0xa7, 0x4b,
	0x86, 0x78, 0x00, 0x6c, 0xf1, 0x14, 0x95, 0xb3, 0x8b, 0x4a, 0x69, 0x07, 0xb7, 0xae, 0x57, 0x76,
	0xd8, 0x8c, 0x04, 0xb0, 0xaa, 0x8a, 0xf8, 0x2d, 0x26, 0xba, 0xfa, 0x89, 0xf7, 0x02, 0x7b, 0x83,
	0xc1, 0xec, 0x06, 0x83, 0xbd, 0xec, 0x2c, 0x9a, 0x81, 0xc8, 0x93, 0x72, 0x65, 0x55, 0x20, 0x3b,
	0xce, 0x8c, 0x59, 0xdd, 0x9d, 0xfe, 0x12, 0xe1, 0xe5, 0xec, 0xaa, 0xf7, 0xdb, 0x17, 0x5f, 0x06,
	0x4e, 0x34, 0x67, 0x90, 0xa7, 0xb0, 0x8e, 0xa7, 0x39, 0x97, 0xa8, 0x8e, 0xad, 0xa1, 0x7f, 0x42,
	0x5f, 0x50, 0x1e, 0xaf, 0x9d, 0x5f, 0x0e, 0x1a, 0xdf, 0x2e, 0x07, 0xce, 0xfe, 0xe1, 0xa7, 0x6b,
	0xcf, 0xb9, 0xba, 0xf6, 0x9c, 0xaf, 0xd7, 0x9e, 0x73, 0x71, 0xe3, 0x35, 0xae, 0x6e, 0xbc, 0xc6,
	0xe7, 0x1b, 0xaf, 0xf1, 0xe6, 0xc1, 0x98, 0xeb, 0x93, 0x22, 0x0e, 0x12, 0x91, 0x86, 0xf6, 0x04,
	0x1e, 0x32, 0x2a, 0xaa, 0x30, 0x3c, 0xad, 0xff, 0x9b, 0xc5, 0x1d, 0x33, 0x74, 0xf7, 0x7b, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x35, 0x59, 0xd7, 0xee, 0xf2, 0x04, 0x00, 0x00,
}

func (this *PublicVerifiableCredential) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublicVerifiableCredential)
	if !ok {
		that2, ok := that.(PublicVerifiableCredential)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Definition != that1.Definition {
		return false
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if len(this.Subject) != len(that1.Subject) {
		return false
	}
	for i := range this.Subject {
		if !this.Subject[i].Equal(that1.Subject[i]) {
			return false
		}
	}
	if that1.IssuedOn == nil {
		if this.IssuedOn != nil {
			return false
		}
	} else if !this.IssuedOn.Equal(*that1.IssuedOn) {
		return false
	}
	if that1.ExpiresOn == nil {
		if this.ExpiresOn != nil {
			return false
		}
	} else if !this.ExpiresOn.Equal(*that1.ExpiresOn) {
		return false
	}
	return true
}
func (m *CredentialIssuer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialIssuer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialIssuer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Accepts) > 0 {
		for iNdEx := len(m.Accepts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accepts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCredentials(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Issues) > 0 {
		for iNdEx := len(m.Issues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCredentials(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialIssuance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialIssuance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialIssuance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Requirements) > 0 {
		for iNdEx := len(m.Requirements) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Requirements[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCredentials(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.CredentialDefinition) > 0 {
		i -= len(m.CredentialDefinition)
		copy(dAtA[i:], m.CredentialDefinition)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.CredentialDefinition)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialConstraint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialConstraint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialConstraint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FromIssuer) > 0 {
		i -= len(m.FromIssuer)
		copy(dAtA[i:], m.FromIssuer)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.FromIssuer)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RequireCredentialDefinition) > 0 {
		i -= len(m.RequireCredentialDefinition)
		copy(dAtA[i:], m.RequireCredentialDefinition)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.RequireCredentialDefinition)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.SupersededBy) > 0 {
		i -= len(m.SupersededBy)
		copy(dAtA[i:], m.SupersededBy)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.SupersededBy)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Vocab) > 0 {
		i -= len(m.Vocab)
		copy(dAtA[i:], m.Vocab)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Vocab)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublisherId) > 0 {
		i -= len(m.PublisherId)
		copy(dAtA[i:], m.PublisherId)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.PublisherId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicVerifiableCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicVerifiableCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicVerifiableCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExpiresOn != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpiresOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresOn):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintCredentials(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x32
	}
	if m.IssuedOn != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuedOn, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuedOn):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintCredentials(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Subject) > 0 {
		for iNdEx := len(m.Subject) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Subject[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCredentials(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Definition) > 0 {
		i -= len(m.Definition)
		copy(dAtA[i:], m.Definition)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Definition)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredentials(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCredentials(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredentials(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialIssuer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	if len(m.Issues) > 0 {
		for _, e := range m.Issues {
			l = e.Size()
			n += 1 + l + sovCredentials(uint64(l))
		}
	}
	if len(m.Accepts) > 0 {
		for _, e := range m.Accepts {
			l = e.Size()
			n += 1 + l + sovCredentials(uint64(l))
		}
	}
	return n
}

func (m *CredentialIssuance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredentialDefinition)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	if len(m.Requirements) > 0 {
		for _, e := range m.Requirements {
			l = e.Size()
			n += 1 + l + sovCredentials(uint64(l))
		}
	}
	return n
}

func (m *CredentialConstraint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RequireCredentialDefinition)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.FromIssuer)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	return n
}

func (m *CredentialDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.PublisherId)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Vocab)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	if m.IsPublic {
		n += 2
	}
	l = len(m.SupersededBy)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *PublicVerifiableCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Definition)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCredentials(uint64(l))
	}
	if len(m.Subject) > 0 {
		for _, e := range m.Subject {
			l = e.Size()
			n += 1 + l + sovCredentials(uint64(l))
		}
	}
	if m.IssuedOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuedOn)
		n += 1 + l + sovCredentials(uint64(l))
	}
	if m.ExpiresOn != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpiresOn)
		n += 1 + l + sovCredentials(uint64(l))
	}
	return n
}

func sovCredentials(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredentials(x uint64) (n int) {
	return sovCredentials(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredentialIssuer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialIssuer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialIssuer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issues = append(m.Issues, &CredentialIssuance{})
			if err := m.Issues[len(m.Issues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accepts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accepts = append(m.Accepts, &CredentialConstraint{})
			if err := m.Accepts[len(m.Accepts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialIssuance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialIssuance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialIssuance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialDefinition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialDefinition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Requirements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Requirements = append(m.Requirements, &CredentialConstraint{})
			if err := m.Requirements[len(m.Requirements)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialConstraint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialConstraint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialConstraint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequireCredentialDefinition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequireCredentialDefinition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromIssuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromIssuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vocab", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vocab = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupersededBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupersededBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicVerifiableCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicVerifiableCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicVerifiableCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Definition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Definition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subject", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Subject = append(m.Subject, &types.Any{})
			if err := m.Subject[len(m.Subject)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuedOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuedOn == nil {
				m.IssuedOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuedOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresOn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentials
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentials
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpiresOn == nil {
				m.ExpiresOn = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpiresOn, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentials(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentials
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredentials(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredentials
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredentials
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredentials
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredentials
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredentials
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredentials        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredentials          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredentials = fmt.Errorf("proto: unexpected end of group")
)
