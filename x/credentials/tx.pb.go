// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credentials/v1/tx.proto

package credentials

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterCredentialIssuerRequest struct {
	Issuer               *CredentialIssuer `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	RevocationServiceURL string            `protobuf:"bytes,2,opt,name=revocationServiceURL,proto3" json:"revocationServiceURL,omitempty"`
	Signer               string            `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgRegisterCredentialIssuerRequest) Reset()         { *m = MsgRegisterCredentialIssuerRequest{} }
func (m *MsgRegisterCredentialIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCredentialIssuerRequest) ProtoMessage()    {}
func (*MsgRegisterCredentialIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{0}
}
func (m *MsgRegisterCredentialIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCredentialIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCredentialIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCredentialIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCredentialIssuerRequest.Merge(m, src)
}
func (m *MsgRegisterCredentialIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCredentialIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCredentialIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCredentialIssuerRequest proto.InternalMessageInfo

type MsgRegisterCredentialIssuerResponse struct {
}

func (m *MsgRegisterCredentialIssuerResponse) Reset()         { *m = MsgRegisterCredentialIssuerResponse{} }
func (m *MsgRegisterCredentialIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCredentialIssuerResponse) ProtoMessage()    {}
func (*MsgRegisterCredentialIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{1}
}
func (m *MsgRegisterCredentialIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCredentialIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCredentialIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCredentialIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCredentialIssuerResponse.Merge(m, src)
}
func (m *MsgRegisterCredentialIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCredentialIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCredentialIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCredentialIssuerResponse proto.InternalMessageInfo

type MsgPublishCredentialDefinitionRequest struct {
	CredentialDefinition *CredentialDefinition `protobuf:"bytes,1,opt,name=credentialDefinition,proto3" json:"credentialDefinition,omitempty"`
	Signer               string                `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgPublishCredentialDefinitionRequest) Reset()         { *m = MsgPublishCredentialDefinitionRequest{} }
func (m *MsgPublishCredentialDefinitionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgPublishCredentialDefinitionRequest) ProtoMessage()    {}
func (*MsgPublishCredentialDefinitionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{2}
}
func (m *MsgPublishCredentialDefinitionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishCredentialDefinitionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishCredentialDefinitionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishCredentialDefinitionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishCredentialDefinitionRequest.Merge(m, src)
}
func (m *MsgPublishCredentialDefinitionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishCredentialDefinitionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishCredentialDefinitionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishCredentialDefinitionRequest proto.InternalMessageInfo

type MsgPublishCredentialDefinitionResponse struct {
}

func (m *MsgPublishCredentialDefinitionResponse) Reset() {
	*m = MsgPublishCredentialDefinitionResponse{}
}
func (m *MsgPublishCredentialDefinitionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPublishCredentialDefinitionResponse) ProtoMessage()    {}
func (*MsgPublishCredentialDefinitionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{3}
}
func (m *MsgPublishCredentialDefinitionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPublishCredentialDefinitionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPublishCredentialDefinitionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPublishCredentialDefinitionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPublishCredentialDefinitionResponse.Merge(m, src)
}
func (m *MsgPublishCredentialDefinitionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPublishCredentialDefinitionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPublishCredentialDefinitionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPublishCredentialDefinitionResponse proto.InternalMessageInfo

type MsgUpdateRevocationListRequest struct {
	IssuerDid  string          `protobuf:"bytes,1,opt,name=issuerDid,proto3" json:"issuerDid,omitempty"`
	Revocation *RevocationList `protobuf:"bytes,2,opt,name=revocation,proto3" json:"revocation,omitempty"`
	Signer     string          `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgUpdateRevocationListRequest) Reset()         { *m = MsgUpdateRevocationListRequest{} }
func (m *MsgUpdateRevocationListRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRevocationListRequest) ProtoMessage()    {}
func (*MsgUpdateRevocationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{4}
}
func (m *MsgUpdateRevocationListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRevocationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRevocationListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRevocationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRevocationListRequest.Merge(m, src)
}
func (m *MsgUpdateRevocationListRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRevocationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRevocationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRevocationListRequest proto.InternalMessageInfo

type MsgUpdateRevocationListResponse struct {
}

func (m *MsgUpdateRevocationListResponse) Reset()         { *m = MsgUpdateRevocationListResponse{} }
func (m *MsgUpdateRevocationListResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateRevocationListResponse) ProtoMessage()    {}
func (*MsgUpdateRevocationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{5}
}
func (m *MsgUpdateRevocationListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateRevocationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateRevocationListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateRevocationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateRevocationListResponse.Merge(m, src)
}
func (m *MsgUpdateRevocationListResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateRevocationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateRevocationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateRevocationListResponse proto.InternalMessageInfo

type MsgAddCredentialIssuanceRequest struct {
	IssuerDid                    string              `protobuf:"bytes,1,opt,name=issuerDid,proto3" json:"issuerDid,omitempty"`
	CredentialIssuanceDefinition *CredentialIssuance `protobuf:"bytes,2,opt,name=credentialIssuanceDefinition,proto3" json:"credentialIssuanceDefinition,omitempty"`
	Signer                       string              `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddCredentialIssuanceRequest) Reset()         { *m = MsgAddCredentialIssuanceRequest{} }
func (m *MsgAddCredentialIssuanceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddCredentialIssuanceRequest) ProtoMessage()    {}
func (*MsgAddCredentialIssuanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{6}
}
func (m *MsgAddCredentialIssuanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCredentialIssuanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCredentialIssuanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCredentialIssuanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCredentialIssuanceRequest.Merge(m, src)
}
func (m *MsgAddCredentialIssuanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCredentialIssuanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCredentialIssuanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCredentialIssuanceRequest proto.InternalMessageInfo

type MsgAddCredentialIssuanceResponse struct {
}

func (m *MsgAddCredentialIssuanceResponse) Reset()         { *m = MsgAddCredentialIssuanceResponse{} }
func (m *MsgAddCredentialIssuanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCredentialIssuanceResponse) ProtoMessage()    {}
func (*MsgAddCredentialIssuanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{7}
}
func (m *MsgAddCredentialIssuanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCredentialIssuanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCredentialIssuanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCredentialIssuanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCredentialIssuanceResponse.Merge(m, src)
}
func (m *MsgAddCredentialIssuanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCredentialIssuanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCredentialIssuanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCredentialIssuanceResponse proto.InternalMessageInfo

type MsgRemoveCredentialIssuanceRequest struct {
	IssuerDid string `protobuf:"bytes,1,opt,name=issuerDid,proto3" json:"issuerDid,omitempty"`
	Cid       string `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
	Signer    string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgRemoveCredentialIssuanceRequest) Reset()         { *m = MsgRemoveCredentialIssuanceRequest{} }
func (m *MsgRemoveCredentialIssuanceRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCredentialIssuanceRequest) ProtoMessage()    {}
func (*MsgRemoveCredentialIssuanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{8}
}
func (m *MsgRemoveCredentialIssuanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCredentialIssuanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCredentialIssuanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCredentialIssuanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCredentialIssuanceRequest.Merge(m, src)
}
func (m *MsgRemoveCredentialIssuanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCredentialIssuanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCredentialIssuanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCredentialIssuanceRequest proto.InternalMessageInfo

type MsgRemoveCredentialIssuanceResponse struct {
}

func (m *MsgRemoveCredentialIssuanceResponse) Reset()         { *m = MsgRemoveCredentialIssuanceResponse{} }
func (m *MsgRemoveCredentialIssuanceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCredentialIssuanceResponse) ProtoMessage()    {}
func (*MsgRemoveCredentialIssuanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{9}
}
func (m *MsgRemoveCredentialIssuanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCredentialIssuanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCredentialIssuanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCredentialIssuanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCredentialIssuanceResponse.Merge(m, src)
}
func (m *MsgRemoveCredentialIssuanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCredentialIssuanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCredentialIssuanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCredentialIssuanceResponse proto.InternalMessageInfo

type MsgAddCredentialConstraintRequest struct {
	IssuerDid  string                `protobuf:"bytes,1,opt,name=issuerDid,proto3" json:"issuerDid,omitempty"`
	Constraint *CredentialConstraint `protobuf:"bytes,2,opt,name=constraint,proto3" json:"constraint,omitempty"`
	Signer     string                `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgAddCredentialConstraintRequest) Reset()         { *m = MsgAddCredentialConstraintRequest{} }
func (m *MsgAddCredentialConstraintRequest) String() string { return proto.CompactTextString(m) }
func (*MsgAddCredentialConstraintRequest) ProtoMessage()    {}
func (*MsgAddCredentialConstraintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{10}
}
func (m *MsgAddCredentialConstraintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCredentialConstraintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCredentialConstraintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCredentialConstraintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCredentialConstraintRequest.Merge(m, src)
}
func (m *MsgAddCredentialConstraintRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCredentialConstraintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCredentialConstraintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCredentialConstraintRequest proto.InternalMessageInfo

type MsgAddCredentialConstraintResponse struct {
}

func (m *MsgAddCredentialConstraintResponse) Reset()         { *m = MsgAddCredentialConstraintResponse{} }
func (m *MsgAddCredentialConstraintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddCredentialConstraintResponse) ProtoMessage()    {}
func (*MsgAddCredentialConstraintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{11}
}
func (m *MsgAddCredentialConstraintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddCredentialConstraintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddCredentialConstraintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddCredentialConstraintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddCredentialConstraintResponse.Merge(m, src)
}
func (m *MsgAddCredentialConstraintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddCredentialConstraintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddCredentialConstraintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddCredentialConstraintResponse proto.InternalMessageInfo

type MsgRemoveCredentialConstraintRequest struct {
	IssuerDid    string `protobuf:"bytes,1,opt,name=issuerDid,proto3" json:"issuerDid,omitempty"`
	ConstraintId string `protobuf:"bytes,2,opt,name=constraintId,proto3" json:"constraintId,omitempty"`
	Signer       string `protobuf:"bytes,3,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgRemoveCredentialConstraintRequest) Reset()         { *m = MsgRemoveCredentialConstraintRequest{} }
func (m *MsgRemoveCredentialConstraintRequest) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCredentialConstraintRequest) ProtoMessage()    {}
func (*MsgRemoveCredentialConstraintRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{12}
}
func (m *MsgRemoveCredentialConstraintRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCredentialConstraintRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCredentialConstraintRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCredentialConstraintRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCredentialConstraintRequest.Merge(m, src)
}
func (m *MsgRemoveCredentialConstraintRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCredentialConstraintRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCredentialConstraintRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCredentialConstraintRequest proto.InternalMessageInfo

type MsgRemoveCredentialConstraintResponse struct {
}

func (m *MsgRemoveCredentialConstraintResponse) Reset()         { *m = MsgRemoveCredentialConstraintResponse{} }
func (m *MsgRemoveCredentialConstraintResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCredentialConstraintResponse) ProtoMessage()    {}
func (*MsgRemoveCredentialConstraintResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{13}
}
func (m *MsgRemoveCredentialConstraintResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCredentialConstraintResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCredentialConstraintResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCredentialConstraintResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCredentialConstraintResponse.Merge(m, src)
}
func (m *MsgRemoveCredentialConstraintResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCredentialConstraintResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCredentialConstraintResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCredentialConstraintResponse proto.InternalMessageInfo

type MsgIssuePublicVerifiableCredentialRequest struct {
	Credential *PublicVerifiableCredential `protobuf:"bytes,1,opt,name=credential,proto3" json:"credential,omitempty"`
	Signer     string                      `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *MsgIssuePublicVerifiableCredentialRequest) Reset() {
	*m = MsgIssuePublicVerifiableCredentialRequest{}
}
func (m *MsgIssuePublicVerifiableCredentialRequest) String() string {
	return proto.CompactTextString(m)
}
func (*MsgIssuePublicVerifiableCredentialRequest) ProtoMessage() {}
func (*MsgIssuePublicVerifiableCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{14}
}
func (m *MsgIssuePublicVerifiableCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssuePublicVerifiableCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssuePublicVerifiableCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssuePublicVerifiableCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssuePublicVerifiableCredentialRequest.Merge(m, src)
}
func (m *MsgIssuePublicVerifiableCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssuePublicVerifiableCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssuePublicVerifiableCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssuePublicVerifiableCredentialRequest proto.InternalMessageInfo

type MsgIssuePublicVerifiableCredentialResponse struct {
}

func (m *MsgIssuePublicVerifiableCredentialResponse) Reset() {
	*m = MsgIssuePublicVerifiableCredentialResponse{}
}
func (m *MsgIssuePublicVerifiableCredentialResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgIssuePublicVerifiableCredentialResponse) ProtoMessage() {}
func (*MsgIssuePublicVerifiableCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_135904727a547ea5, []int{15}
}
func (m *MsgIssuePublicVerifiableCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgIssuePublicVerifiableCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgIssuePublicVerifiableCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgIssuePublicVerifiableCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgIssuePublicVerifiableCredentialResponse.Merge(m, src)
}
func (m *MsgIssuePublicVerifiableCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgIssuePublicVerifiableCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgIssuePublicVerifiableCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgIssuePublicVerifiableCredentialResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterCredentialIssuerRequest)(nil), "elestodao.elesto.credentials.v1.MsgRegisterCredentialIssuerRequest")
	proto.RegisterType((*MsgRegisterCredentialIssuerResponse)(nil), "elestodao.elesto.credentials.v1.MsgRegisterCredentialIssuerResponse")
	proto.RegisterType((*MsgPublishCredentialDefinitionRequest)(nil), "elestodao.elesto.credentials.v1.MsgPublishCredentialDefinitionRequest")
	proto.RegisterType((*MsgPublishCredentialDefinitionResponse)(nil), "elestodao.elesto.credentials.v1.MsgPublishCredentialDefinitionResponse")
	proto.RegisterType((*MsgUpdateRevocationListRequest)(nil), "elestodao.elesto.credentials.v1.MsgUpdateRevocationListRequest")
	proto.RegisterType((*MsgUpdateRevocationListResponse)(nil), "elestodao.elesto.credentials.v1.MsgUpdateRevocationListResponse")
	proto.RegisterType((*MsgAddCredentialIssuanceRequest)(nil), "elestodao.elesto.credentials.v1.MsgAddCredentialIssuanceRequest")
	proto.RegisterType((*MsgAddCredentialIssuanceResponse)(nil), "elestodao.elesto.credentials.v1.MsgAddCredentialIssuanceResponse")
	proto.RegisterType((*MsgRemoveCredentialIssuanceRequest)(nil), "elestodao.elesto.credentials.v1.MsgRemoveCredentialIssuanceRequest")
	proto.RegisterType((*MsgRemoveCredentialIssuanceResponse)(nil), "elestodao.elesto.credentials.v1.MsgRemoveCredentialIssuanceResponse")
	proto.RegisterType((*MsgAddCredentialConstraintRequest)(nil), "elestodao.elesto.credentials.v1.MsgAddCredentialConstraintRequest")
	proto.RegisterType((*MsgAddCredentialConstraintResponse)(nil), "elestodao.elesto.credentials.v1.MsgAddCredentialConstraintResponse")
	proto.RegisterType((*MsgRemoveCredentialConstraintRequest)(nil), "elestodao.elesto.credentials.v1.MsgRemoveCredentialConstraintRequest")
	proto.RegisterType((*MsgRemoveCredentialConstraintResponse)(nil), "elestodao.elesto.credentials.v1.MsgRemoveCredentialConstraintResponse")
	proto.RegisterType((*MsgIssuePublicVerifiableCredentialRequest)(nil), "elestodao.elesto.credentials.v1.MsgIssuePublicVerifiableCredentialRequest")
	proto.RegisterType((*MsgIssuePublicVerifiableCredentialResponse)(nil), "elestodao.elesto.credentials.v1.MsgIssuePublicVerifiableCredentialResponse")
}

func init() { proto.RegisterFile("credentials/v1/tx.proto", fileDescriptor_135904727a547ea5) }

var fileDescriptor_135904727a547ea5 = []byte{
	// 742 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xcf, 0x4f, 0x13, 0x41,
	0x18, 0xed, 0x40, 0x42, 0xe4, 0xc3, 0x83, 0x99, 0x54, 0x69, 0x56, 0xb2, 0x2d, 0x15, 0x14, 0x89,
	0x6e, 0x43, 0x89, 0x17, 0x3d, 0x28, 0xb4, 0x62, 0x50, 0x1a, 0x4d, 0x0d, 0x1e, 0xf4, 0xb4, 0xdd,
	0x1d, 0x96, 0x49, 0xca, 0x0e, 0xee, 0x6c, 0x2b, 0x7f, 0x82, 0xf1, 0xe4, 0xd5, 0xc4, 0x03, 0x31,
	0xf1, 0xa2, 0x89, 0x89, 0x89, 0x27, 0xee, 0x26, 0x1e, 0xf1, 0x66, 0x3c, 0x19, 0xb8, 0xf8, 0x67,
	0x18, 0x66, 0xa7, 0x74, 0xa1, 0xfb, 0x63, 0x96, 0x7a, 0x9b, 0x6e, 0xbf, 0x79, 0xdf, 0x7b, 0xdf,
	0xdb, 0x79, 0x93, 0x85, 0x49, 0xcb, 0x23, 0x36, 0x71, 0x7d, 0x6a, 0xb6, 0x79, 0xa5, 0xbb, 0x50,
	0xf1, 0x77, 0x8c, 0x6d, 0x8f, 0xf9, 0x0c, 0x17, 0x49, 0x9b, 0x70, 0x9f, 0xd9, 0x26, 0x33, 0x82,
	0x95, 0x11, 0xaa, 0x34, 0xba, 0x0b, 0x5a, 0xde, 0x61, 0x0e, 0x13, 0xb5, 0x95, 0xa3, 0x55, 0xb0,
	0x4d, 0x2b, 0x9d, 0xc2, 0x0b, 0x6f, 0x12, 0x15, 0xe5, 0xef, 0x08, 0xca, 0x0d, 0xee, 0x34, 0x89,
	0x43, 0xb9, 0x4f, 0xbc, 0xda, 0x71, 0xc1, 0x2a, 0xe7, 0x1d, 0xe2, 0x35, 0xc9, 0xcb, 0x0e, 0xe1,
	0x3e, 0x5e, 0x85, 0x31, 0x2a, 0x1e, 0x14, 0x50, 0x09, 0xcd, 0x4d, 0x54, 0x17, 0x8c, 0x14, 0x42,
	0xc6, 0x00, 0x92, 0x04, 0xc0, 0x55, 0xc8, 0x7b, 0xa4, 0xcb, 0x2c, 0xd3, 0xa7, 0xcc, 0x7d, 0x4a,
	0xbc, 0x2e, 0xb5, 0xc8, 0x7a, 0x73, 0xad, 0x30, 0x52, 0x42, 0x73, 0xe3, 0xcd, 0xc8, 0xff, 0xf0,
	0x25, 0x18, 0xe3, 0xd4, 0x71, 0x89, 0x57, 0x18, 0x15, 0x55, 0xf2, 0xd7, 0xed, 0x73, 0xaf, 0x77,
	0x8b, 0xb9, 0xbf, 0xbb, 0xc5, 0x5c, 0x79, 0x16, 0xae, 0x24, 0xca, 0xe0, 0xdb, 0xcc, 0xe5, 0xa4,
	0xfc, 0x0d, 0xc1, 0x6c, 0x83, 0x3b, 0x4f, 0x3a, 0xad, 0x36, 0xe5, 0x9b, 0xfd, 0xb2, 0x3a, 0xd9,
	0xa0, 0x2e, 0x3d, 0xea, 0xda, 0x53, 0x4c, 0x21, 0x6f, 0x45, 0xfc, 0x2d, 0xf5, 0xdf, 0xca, 0xa0,
	0x3f, 0x84, 0x1d, 0x09, 0x19, 0x52, 0x37, 0x12, 0xa3, 0x6e, 0x0e, 0xae, 0xa6, 0xb1, 0x96, 0x02,
	0xbf, 0x22, 0xd0, 0x1b, 0xdc, 0x59, 0xdf, 0xb6, 0x4d, 0x9f, 0x34, 0x8f, 0x67, 0xb9, 0x46, 0xb9,
	0xdf, 0x53, 0x36, 0x05, 0xe3, 0x81, 0x15, 0x75, 0x6a, 0x0b, 0x39, 0xe3, 0xcd, 0xfe, 0x03, 0xfc,
	0x18, 0xa0, 0x6f, 0x81, 0x20, 0x34, 0x51, 0xad, 0xa4, 0xaa, 0x3d, 0xd5, 0x29, 0x04, 0xa1, 0xe0,
	0xdd, 0x34, 0x14, 0x63, 0x29, 0x4b, 0x59, 0xbf, 0x91, 0xa8, 0x59, 0xb2, 0xed, 0x93, 0xd6, 0x9a,
	0xae, 0x45, 0xd4, 0x74, 0xbd, 0x82, 0x29, 0x6b, 0x60, 0x6b, 0xc8, 0xd7, 0x40, 0xe9, 0x62, 0xc6,
	0xf7, 0x5a, 0xf4, 0x4f, 0x04, 0x56, 0xd0, 0x5f, 0x86, 0x52, 0xbc, 0x36, 0x39, 0x80, 0xae, 0x3c,
	0xa6, 0x5b, 0xac, 0x4b, 0xce, 0x3a, 0x82, 0x0b, 0x30, 0x6a, 0x51, 0x5b, 0xbe, 0x64, 0x47, 0xcb,
	0x0c, 0xe7, 0x2a, 0xae, 0xaf, 0xa4, 0xb7, 0x87, 0x60, 0xfa, 0xb4, 0x86, 0x1a, 0x73, 0xb9, 0xef,
	0x99, 0xd4, 0x55, 0x7c, 0xf3, 0xd6, 0x01, 0xac, 0xe3, 0x2d, 0xd2, 0x8f, 0x2c, 0xe7, 0x2c, 0xd4,
	0x2f, 0x04, 0xa4, 0xa0, 0x71, 0x46, 0xcc, 0x36, 0x96, 0xbb, 0x94, 0xf8, 0x06, 0xc1, 0x4c, 0xc4,
	0x28, 0xb2, 0xaa, 0x2c, 0xc3, 0xf9, 0x3e, 0xb9, 0xd5, 0x9e, 0x1b, 0x27, 0x9e, 0x29, 0x50, 0xbe,
	0x26, 0x62, 0x2c, 0x89, 0x8b, 0x64, 0xfd, 0x09, 0xc1, 0xf5, 0x06, 0x77, 0x44, 0x0c, 0x8a, 0xfc,
	0xb0, 0x9e, 0x11, 0x8f, 0x6e, 0x50, 0xb3, 0xd5, 0x0e, 0x6d, 0xec, 0x51, 0x7f, 0x01, 0xd0, 0x1f,
	0xaf, 0x8c, 0xba, 0x3b, 0xa9, 0x16, 0x24, 0xe0, 0x86, 0xe0, 0x14, 0x62, 0xee, 0x06, 0xcc, 0xab,
	0x70, 0x0d, 0xa4, 0x55, 0x7f, 0x02, 0x8c, 0x36, 0xb8, 0x83, 0xbf, 0x20, 0xb8, 0x9c, 0x10, 0x8d,
	0x78, 0x25, 0x55, 0x80, 0xd2, 0x8d, 0xa0, 0x3d, 0x18, 0x1a, 0x27, 0x20, 0x8e, 0x3f, 0x22, 0x28,
	0xc4, 0xdd, 0x54, 0xb8, 0xa6, 0xd2, 0x25, 0xe5, 0xba, 0xd6, 0xea, 0xc3, 0x81, 0x48, 0x9e, 0xef,
	0x10, 0xe4, 0xa3, 0x52, 0x19, 0xdf, 0x55, 0x81, 0x4f, 0xb8, 0x82, 0xb4, 0x7b, 0x67, 0x07, 0x90,
	0xdc, 0xde, 0x23, 0xb8, 0x18, 0x99, 0x98, 0x58, 0x09, 0x3b, 0xe9, 0x22, 0xd1, 0x96, 0x86, 0x40,
	0x38, 0x61, 0x71, 0x74, 0x68, 0xaa, 0x5a, 0x9c, 0x18, 0xf5, 0xaa, 0x16, 0x27, 0xe7, 0x36, 0xfe,
	0x80, 0x60, 0x32, 0x26, 0xf8, 0xf0, 0x72, 0xe6, 0x31, 0x0c, 0x64, 0xa1, 0x56, 0x1b, 0x0a, 0x43,
	0x92, 0xfc, 0x8c, 0x40, 0x8b, 0x8f, 0x3a, 0x7c, 0xff, 0x2c, 0x93, 0x18, 0xa4, 0xba, 0x32, 0x2c,
	0x8c, 0x64, 0xbb, 0x87, 0xa0, 0x98, 0x12, 0x61, 0xf8, 0xa1, 0x4a, 0x2f, 0xb5, 0xcc, 0xd6, 0x1e,
	0xfd, 0x17, 0xac, 0x80, 0xfc, 0x72, 0xfd, 0xc7, 0x81, 0x8e, 0xf6, 0x0f, 0x74, 0xf4, 0xe7, 0x40,
	0x47, 0x6f, 0x0f, 0xf5, 0xdc, 0xfe, 0xa1, 0x9e, 0xfb, 0x75, 0xa8, 0xe7, 0x9e, 0xcf, 0x3b, 0xd4,
	0xdf, 0xec, 0xb4, 0x0c, 0x8b, 0x6d, 0x55, 0x82, 0x36, 0x37, 0x6d, 0x93, 0xc9, 0x65, 0x65, 0x27,
	0xfc, 0x69, 0xd1, 0x1a, 0x13, 0xdf, 0x16, 0x8b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x05,
	0xc1, 0x08, 0xcf, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	PublishCredentialDefinition(ctx context.Context, in *MsgPublishCredentialDefinitionRequest, opts ...grpc.CallOption) (*MsgPublishCredentialDefinitionResponse, error)
	RegisterCredentialIssuer(ctx context.Context, in *MsgRegisterCredentialIssuerRequest, opts ...grpc.CallOption) (*MsgRegisterCredentialIssuerResponse, error)
	UpdateRevocationList(ctx context.Context, in *MsgUpdateRevocationListRequest, opts ...grpc.CallOption) (*MsgUpdateRevocationListResponse, error)
	AddCredentialIssuance(ctx context.Context, in *MsgAddCredentialIssuanceRequest, opts ...grpc.CallOption) (*MsgAddCredentialIssuanceResponse, error)
	RemoveCredentialIssuance(ctx context.Context, in *MsgRemoveCredentialIssuanceRequest, opts ...grpc.CallOption) (*MsgRemoveCredentialIssuanceResponse, error)
	AddCredentialConstraint(ctx context.Context, in *MsgAddCredentialConstraintRequest, opts ...grpc.CallOption) (*MsgAddCredentialConstraintResponse, error)
	RemoveCredentialConstraint(ctx context.Context, in *MsgRemoveCredentialConstraintRequest, opts ...grpc.CallOption) (*MsgRemoveCredentialConstraintResponse, error)
	IssuePublicVerifiableCredential(ctx context.Context, in *MsgIssuePublicVerifiableCredentialRequest, opts ...grpc.CallOption) (*MsgIssuePublicVerifiableCredentialResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PublishCredentialDefinition(ctx context.Context, in *MsgPublishCredentialDefinitionRequest, opts ...grpc.CallOption) (*MsgPublishCredentialDefinitionResponse, error) {
	out := new(MsgPublishCredentialDefinitionResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/PublishCredentialDefinition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterCredentialIssuer(ctx context.Context, in *MsgRegisterCredentialIssuerRequest, opts ...grpc.CallOption) (*MsgRegisterCredentialIssuerResponse, error) {
	out := new(MsgRegisterCredentialIssuerResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/RegisterCredentialIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateRevocationList(ctx context.Context, in *MsgUpdateRevocationListRequest, opts ...grpc.CallOption) (*MsgUpdateRevocationListResponse, error) {
	out := new(MsgUpdateRevocationListResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/UpdateRevocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCredentialIssuance(ctx context.Context, in *MsgAddCredentialIssuanceRequest, opts ...grpc.CallOption) (*MsgAddCredentialIssuanceResponse, error) {
	out := new(MsgAddCredentialIssuanceResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/AddCredentialIssuance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCredentialIssuance(ctx context.Context, in *MsgRemoveCredentialIssuanceRequest, opts ...grpc.CallOption) (*MsgRemoveCredentialIssuanceResponse, error) {
	out := new(MsgRemoveCredentialIssuanceResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/RemoveCredentialIssuance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddCredentialConstraint(ctx context.Context, in *MsgAddCredentialConstraintRequest, opts ...grpc.CallOption) (*MsgAddCredentialConstraintResponse, error) {
	out := new(MsgAddCredentialConstraintResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/AddCredentialConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCredentialConstraint(ctx context.Context, in *MsgRemoveCredentialConstraintRequest, opts ...grpc.CallOption) (*MsgRemoveCredentialConstraintResponse, error) {
	out := new(MsgRemoveCredentialConstraintResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/RemoveCredentialConstraint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) IssuePublicVerifiableCredential(ctx context.Context, in *MsgIssuePublicVerifiableCredentialRequest, opts ...grpc.CallOption) (*MsgIssuePublicVerifiableCredentialResponse, error) {
	out := new(MsgIssuePublicVerifiableCredentialResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Msg/IssuePublicVerifiableCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	PublishCredentialDefinition(context.Context, *MsgPublishCredentialDefinitionRequest) (*MsgPublishCredentialDefinitionResponse, error)
	RegisterCredentialIssuer(context.Context, *MsgRegisterCredentialIssuerRequest) (*MsgRegisterCredentialIssuerResponse, error)
	UpdateRevocationList(context.Context, *MsgUpdateRevocationListRequest) (*MsgUpdateRevocationListResponse, error)
	AddCredentialIssuance(context.Context, *MsgAddCredentialIssuanceRequest) (*MsgAddCredentialIssuanceResponse, error)
	RemoveCredentialIssuance(context.Context, *MsgRemoveCredentialIssuanceRequest) (*MsgRemoveCredentialIssuanceResponse, error)
	AddCredentialConstraint(context.Context, *MsgAddCredentialConstraintRequest) (*MsgAddCredentialConstraintResponse, error)
	RemoveCredentialConstraint(context.Context, *MsgRemoveCredentialConstraintRequest) (*MsgRemoveCredentialConstraintResponse, error)
	IssuePublicVerifiableCredential(context.Context, *MsgIssuePublicVerifiableCredentialRequest) (*MsgIssuePublicVerifiableCredentialResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PublishCredentialDefinition(ctx context.Context, req *MsgPublishCredentialDefinitionRequest) (*MsgPublishCredentialDefinitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishCredentialDefinition not implemented")
}
func (*UnimplementedMsgServer) RegisterCredentialIssuer(ctx context.Context, req *MsgRegisterCredentialIssuerRequest) (*MsgRegisterCredentialIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCredentialIssuer not implemented")
}
func (*UnimplementedMsgServer) UpdateRevocationList(ctx context.Context, req *MsgUpdateRevocationListRequest) (*MsgUpdateRevocationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRevocationList not implemented")
}
func (*UnimplementedMsgServer) AddCredentialIssuance(ctx context.Context, req *MsgAddCredentialIssuanceRequest) (*MsgAddCredentialIssuanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredentialIssuance not implemented")
}
func (*UnimplementedMsgServer) RemoveCredentialIssuance(ctx context.Context, req *MsgRemoveCredentialIssuanceRequest) (*MsgRemoveCredentialIssuanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCredentialIssuance not implemented")
}
func (*UnimplementedMsgServer) AddCredentialConstraint(ctx context.Context, req *MsgAddCredentialConstraintRequest) (*MsgAddCredentialConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCredentialConstraint not implemented")
}
func (*UnimplementedMsgServer) RemoveCredentialConstraint(ctx context.Context, req *MsgRemoveCredentialConstraintRequest) (*MsgRemoveCredentialConstraintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCredentialConstraint not implemented")
}
func (*UnimplementedMsgServer) IssuePublicVerifiableCredential(ctx context.Context, req *MsgIssuePublicVerifiableCredentialRequest) (*MsgIssuePublicVerifiableCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssuePublicVerifiableCredential not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PublishCredentialDefinition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPublishCredentialDefinitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PublishCredentialDefinition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/PublishCredentialDefinition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PublishCredentialDefinition(ctx, req.(*MsgPublishCredentialDefinitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterCredentialIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCredentialIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCredentialIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/RegisterCredentialIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCredentialIssuer(ctx, req.(*MsgRegisterCredentialIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateRevocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateRevocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateRevocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/UpdateRevocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateRevocationList(ctx, req.(*MsgUpdateRevocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCredentialIssuance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCredentialIssuanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCredentialIssuance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/AddCredentialIssuance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCredentialIssuance(ctx, req.(*MsgAddCredentialIssuanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCredentialIssuance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCredentialIssuanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCredentialIssuance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/RemoveCredentialIssuance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCredentialIssuance(ctx, req.(*MsgRemoveCredentialIssuanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddCredentialConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddCredentialConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddCredentialConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/AddCredentialConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddCredentialConstraint(ctx, req.(*MsgAddCredentialConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCredentialConstraint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCredentialConstraintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCredentialConstraint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/RemoveCredentialConstraint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCredentialConstraint(ctx, req.(*MsgRemoveCredentialConstraintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_IssuePublicVerifiableCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgIssuePublicVerifiableCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).IssuePublicVerifiableCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Msg/IssuePublicVerifiableCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).IssuePublicVerifiableCredential(ctx, req.(*MsgIssuePublicVerifiableCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elestodao.elesto.credentials.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishCredentialDefinition",
			Handler:    _Msg_PublishCredentialDefinition_Handler,
		},
		{
			MethodName: "RegisterCredentialIssuer",
			Handler:    _Msg_RegisterCredentialIssuer_Handler,
		},
		{
			MethodName: "UpdateRevocationList",
			Handler:    _Msg_UpdateRevocationList_Handler,
		},
		{
			MethodName: "AddCredentialIssuance",
			Handler:    _Msg_AddCredentialIssuance_Handler,
		},
		{
			MethodName: "RemoveCredentialIssuance",
			Handler:    _Msg_RemoveCredentialIssuance_Handler,
		},
		{
			MethodName: "AddCredentialConstraint",
			Handler:    _Msg_AddCredentialConstraint_Handler,
		},
		{
			MethodName: "RemoveCredentialConstraint",
			Handler:    _Msg_RemoveCredentialConstraint_Handler,
		},
		{
			MethodName: "IssuePublicVerifiableCredential",
			Handler:    _Msg_IssuePublicVerifiableCredential_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credentials/v1/tx.proto",
}

func (m *MsgRegisterCredentialIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCredentialIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCredentialIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RevocationServiceURL) > 0 {
		i -= len(m.RevocationServiceURL)
		copy(dAtA[i:], m.RevocationServiceURL)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RevocationServiceURL)))
		i--
		dAtA[i] = 0x12
	}
	if m.Issuer != nil {
		{
			size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCredentialIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCredentialIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCredentialIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPublishCredentialDefinitionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishCredentialDefinitionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishCredentialDefinitionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.CredentialDefinition != nil {
		{
			size, err := m.CredentialDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPublishCredentialDefinitionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPublishCredentialDefinitionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPublishCredentialDefinitionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRevocationListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRevocationListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRevocationListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Revocation != nil {
		{
			size, err := m.Revocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateRevocationListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateRevocationListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateRevocationListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddCredentialIssuanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCredentialIssuanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCredentialIssuanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialIssuanceDefinition != nil {
		{
			size, err := m.CredentialIssuanceDefinition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCredentialIssuanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCredentialIssuanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCredentialIssuanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCredentialIssuanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCredentialIssuanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCredentialIssuanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cid) > 0 {
		i -= len(m.Cid)
		copy(dAtA[i:], m.Cid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Cid)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCredentialIssuanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCredentialIssuanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCredentialIssuanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddCredentialConstraintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCredentialConstraintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCredentialConstraintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Constraint != nil {
		{
			size, err := m.Constraint.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddCredentialConstraintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddCredentialConstraintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddCredentialConstraintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCredentialConstraintRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCredentialConstraintRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCredentialConstraintRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConstraintId) > 0 {
		i -= len(m.ConstraintId)
		copy(dAtA[i:], m.ConstraintId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ConstraintId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IssuerDid) > 0 {
		i -= len(m.IssuerDid)
		copy(dAtA[i:], m.IssuerDid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IssuerDid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCredentialConstraintResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCredentialConstraintResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCredentialConstraintResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgIssuePublicVerifiableCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssuePublicVerifiableCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssuePublicVerifiableCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Credential != nil {
		{
			size, err := m.Credential.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgIssuePublicVerifiableCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgIssuePublicVerifiableCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgIssuePublicVerifiableCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterCredentialIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Issuer != nil {
		l = m.Issuer.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.RevocationServiceURL)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCredentialIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPublishCredentialDefinitionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialDefinition != nil {
		l = m.CredentialDefinition.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPublishCredentialDefinitionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateRevocationListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Revocation != nil {
		l = m.Revocation.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateRevocationListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddCredentialIssuanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialIssuanceDefinition != nil {
		l = m.CredentialIssuanceDefinition.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddCredentialIssuanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveCredentialIssuanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Cid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveCredentialIssuanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddCredentialConstraintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Constraint != nil {
		l = m.Constraint.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddCredentialConstraintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveCredentialConstraintRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IssuerDid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ConstraintId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRemoveCredentialConstraintResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgIssuePublicVerifiableCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Credential != nil {
		l = m.Credential.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgIssuePublicVerifiableCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterCredentialIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCredentialIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCredentialIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issuer == nil {
				m.Issuer = &CredentialIssuer{}
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationServiceURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationServiceURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCredentialIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCredentialIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCredentialIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishCredentialDefinitionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishCredentialDefinitionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishCredentialDefinitionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialDefinition == nil {
				m.CredentialDefinition = &CredentialDefinition{}
			}
			if err := m.CredentialDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPublishCredentialDefinitionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPublishCredentialDefinitionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPublishCredentialDefinitionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRevocationListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRevocationListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRevocationListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Revocation == nil {
				m.Revocation = &RevocationList{}
			}
			if err := m.Revocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateRevocationListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateRevocationListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateRevocationListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCredentialIssuanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCredentialIssuanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCredentialIssuanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialIssuanceDefinition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialIssuanceDefinition == nil {
				m.CredentialIssuanceDefinition = &CredentialIssuance{}
			}
			if err := m.CredentialIssuanceDefinition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCredentialIssuanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCredentialIssuanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCredentialIssuanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCredentialIssuanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCredentialIssuanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCredentialIssuanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCredentialIssuanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCredentialIssuanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCredentialIssuanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCredentialConstraintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCredentialConstraintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCredentialConstraintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Constraint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Constraint == nil {
				m.Constraint = &CredentialConstraint{}
			}
			if err := m.Constraint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddCredentialConstraintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddCredentialConstraintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddCredentialConstraintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCredentialConstraintRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCredentialConstraintRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCredentialConstraintRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuerDid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuerDid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConstraintId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConstraintId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCredentialConstraintResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCredentialConstraintResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCredentialConstraintResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssuePublicVerifiableCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssuePublicVerifiableCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssuePublicVerifiableCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credential", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Credential == nil {
				m.Credential = &PublicVerifiableCredential{}
			}
			if err := m.Credential.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgIssuePublicVerifiableCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgIssuePublicVerifiableCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgIssuePublicVerifiableCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
