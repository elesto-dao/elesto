// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credentials/v1/query.proto

package credentials

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryPublicCredentialRequest is request type for Query/DidDocuments RPC method.
type QueryCredentialIssuerRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryCredentialIssuerRequest) Reset()         { *m = QueryCredentialIssuerRequest{} }
func (m *QueryCredentialIssuerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialIssuerRequest) ProtoMessage()    {}
func (*QueryCredentialIssuerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18cc5d37fb7ced7, []int{0}
}
func (m *QueryCredentialIssuerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialIssuerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialIssuerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialIssuerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialIssuerRequest.Merge(m, src)
}
func (m *QueryCredentialIssuerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialIssuerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialIssuerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialIssuerRequest proto.InternalMessageInfo

func (m *QueryCredentialIssuerRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryCredentialIssuerResponse is response type for the Query/DidDocuments RPC method
type QueryCredentialIssuerResponse struct {
	// Returns a did document
	Issuer *CredentialIssuer `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
}

func (m *QueryCredentialIssuerResponse) Reset()         { *m = QueryCredentialIssuerResponse{} }
func (m *QueryCredentialIssuerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialIssuerResponse) ProtoMessage()    {}
func (*QueryCredentialIssuerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18cc5d37fb7ced7, []int{1}
}
func (m *QueryCredentialIssuerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialIssuerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialIssuerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialIssuerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialIssuerResponse.Merge(m, src)
}
func (m *QueryCredentialIssuerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialIssuerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialIssuerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialIssuerResponse proto.InternalMessageInfo

func (m *QueryCredentialIssuerResponse) GetIssuer() *CredentialIssuer {
	if m != nil {
		return m.Issuer
	}
	return nil
}

type QueryRevocationListRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryRevocationListRequest) Reset()         { *m = QueryRevocationListRequest{} }
func (m *QueryRevocationListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRevocationListRequest) ProtoMessage()    {}
func (*QueryRevocationListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18cc5d37fb7ced7, []int{2}
}
func (m *QueryRevocationListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevocationListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevocationListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevocationListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevocationListRequest.Merge(m, src)
}
func (m *QueryRevocationListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevocationListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevocationListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevocationListRequest proto.InternalMessageInfo

func (m *QueryRevocationListRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QueryRevocationListResponse struct {
	// Returns a did document
	RevocationList *RevocationList `protobuf:"bytes,1,opt,name=revocationList,proto3" json:"revocationList,omitempty"`
}

func (m *QueryRevocationListResponse) Reset()         { *m = QueryRevocationListResponse{} }
func (m *QueryRevocationListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRevocationListResponse) ProtoMessage()    {}
func (*QueryRevocationListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18cc5d37fb7ced7, []int{3}
}
func (m *QueryRevocationListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRevocationListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRevocationListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRevocationListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRevocationListResponse.Merge(m, src)
}
func (m *QueryRevocationListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRevocationListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRevocationListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRevocationListResponse proto.InternalMessageInfo

func (m *QueryRevocationListResponse) GetRevocationList() *RevocationList {
	if m != nil {
		return m.RevocationList
	}
	return nil
}

type QueryPublicCredentialsRequest struct {
}

func (m *QueryPublicCredentialsRequest) Reset()         { *m = QueryPublicCredentialsRequest{} }
func (m *QueryPublicCredentialsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPublicCredentialsRequest) ProtoMessage()    {}
func (*QueryPublicCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18cc5d37fb7ced7, []int{4}
}
func (m *QueryPublicCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublicCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublicCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublicCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublicCredentialsRequest.Merge(m, src)
}
func (m *QueryPublicCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublicCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublicCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublicCredentialsRequest proto.InternalMessageInfo

type QueryPublicCredentialsResponse struct {
	Credentials []*PublicVerifiableCredential `protobuf:"bytes,1,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *QueryPublicCredentialsResponse) Reset()         { *m = QueryPublicCredentialsResponse{} }
func (m *QueryPublicCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPublicCredentialsResponse) ProtoMessage()    {}
func (*QueryPublicCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a18cc5d37fb7ced7, []int{5}
}
func (m *QueryPublicCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPublicCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPublicCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPublicCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPublicCredentialsResponse.Merge(m, src)
}
func (m *QueryPublicCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPublicCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPublicCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPublicCredentialsResponse proto.InternalMessageInfo

func (m *QueryPublicCredentialsResponse) GetCredentials() []*PublicVerifiableCredential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryCredentialIssuerRequest)(nil), "elestodao.elesto.credentials.v1.QueryCredentialIssuerRequest")
	proto.RegisterType((*QueryCredentialIssuerResponse)(nil), "elestodao.elesto.credentials.v1.QueryCredentialIssuerResponse")
	proto.RegisterType((*QueryRevocationListRequest)(nil), "elestodao.elesto.credentials.v1.QueryRevocationListRequest")
	proto.RegisterType((*QueryRevocationListResponse)(nil), "elestodao.elesto.credentials.v1.QueryRevocationListResponse")
	proto.RegisterType((*QueryPublicCredentialsRequest)(nil), "elestodao.elesto.credentials.v1.QueryPublicCredentialsRequest")
	proto.RegisterType((*QueryPublicCredentialsResponse)(nil), "elestodao.elesto.credentials.v1.QueryPublicCredentialsResponse")
}

func init() { proto.RegisterFile("credentials/v1/query.proto", fileDescriptor_a18cc5d37fb7ced7) }

var fileDescriptor_a18cc5d37fb7ced7 = []byte{
	// 454 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xcd, 0xaa, 0xd3, 0x40,
	0x1c, 0xc5, 0x3b, 0x55, 0x0b, 0x4e, 0xa1, 0xe8, 0x88, 0x50, 0xd2, 0x9a, 0x96, 0x20, 0x52, 0x4a,
	0x9d, 0xd8, 0xba, 0xac, 0x1f, 0xa0, 0x6e, 0x0a, 0x2e, 0x34, 0x0b, 0x05, 0x41, 0x24, 0x1f, 0x63,
	0x1d, 0x89, 0x99, 0x36, 0x33, 0x09, 0x8a, 0x88, 0xe0, 0x13, 0x08, 0x3e, 0x89, 0x0f, 0x50, 0xdc,
	0xba, 0x2c, 0xb8, 0x71, 0x79, 0x69, 0xef, 0x83, 0x5c, 0xee, 0x64, 0xee, 0x6d, 0x9a, 0x26, 0x37,
	0xa5, 0xbb, 0xa1, 0xf3, 0x3f, 0xe7, 0xff, 0x3b, 0xd3, 0x43, 0xa0, 0xe6, 0x86, 0xc4, 0x23, 0x81,
	0xa0, 0xb6, 0xcf, 0xcd, 0x78, 0x68, 0xce, 0x23, 0x12, 0x7e, 0xc1, 0xb3, 0x90, 0x09, 0x86, 0x3a,
	0xc4, 0x27, 0x5c, 0x30, 0xcf, 0x66, 0x38, 0x39, 0xe1, 0xd4, 0x30, 0x8e, 0x87, 0x5a, 0x7b, 0xca,
	0xd8, 0xd4, 0x27, 0xa6, 0x3d, 0xa3, 0xa6, 0x1d, 0x04, 0x4c, 0xd8, 0x82, 0xb2, 0x80, 0x27, 0x72,
	0xad, 0x9b, 0xb1, 0x4e, 0x8b, 0xe5, 0x84, 0x81, 0x61, 0xfb, 0xe5, 0xe9, 0xbe, 0xa7, 0xe7, 0x37,
	0x13, 0xce, 0x23, 0x12, 0x5a, 0x64, 0x1e, 0x11, 0x2e, 0x50, 0x03, 0x56, 0xa9, 0xd7, 0x04, 0x5d,
	0xd0, 0xbb, 0x6a, 0x55, 0xa9, 0x67, 0x7c, 0x84, 0xb7, 0x0a, 0xe6, 0xf9, 0x8c, 0x05, 0x9c, 0xa0,
	0x09, 0xac, 0x51, 0xf9, 0x8b, 0x14, 0xd5, 0x47, 0x43, 0x5c, 0x12, 0x01, 0xef, 0x58, 0x29, 0x03,
	0x63, 0x00, 0x35, 0xb9, 0xcb, 0x22, 0x31, 0x73, 0x65, 0xae, 0xe7, 0x94, 0x8b, 0x22, 0xb2, 0x18,
	0xb6, 0x72, 0xa7, 0x15, 0xd7, 0x6b, 0xd8, 0x08, 0xb7, 0x6e, 0x14, 0x9f, 0x59, 0xca, 0x97, 0x31,
	0xcc, 0xd8, 0x18, 0x1d, 0xf5, 0x22, 0x2f, 0x22, 0xc7, 0xa7, 0xee, 0x26, 0x0c, 0x57, 0xa0, 0xc6,
	0x77, 0xa8, 0x17, 0x0d, 0x28, 0xb6, 0xb7, 0xb0, 0x9e, 0xda, 0xd9, 0x04, 0xdd, 0x4b, 0xbd, 0xfa,
	0x68, 0x5c, 0x0a, 0x96, 0x18, 0xbe, 0x22, 0x21, 0x7d, 0x4f, 0x6d, 0xc7, 0x27, 0x1b, 0x6b, 0x2b,
	0xed, 0x37, 0x5a, 0x5c, 0x86, 0x57, 0x24, 0x01, 0xfa, 0x03, 0xe0, 0xb5, 0xec, 0x73, 0xa3, 0x87,
	0xa5, 0x8b, 0x2e, 0x6a, 0x88, 0xf6, 0xe8, 0x50, 0x79, 0x12, 0xde, 0x18, 0xfc, 0xf8, 0x77, 0xfc,
	0xab, 0x7a, 0x07, 0xdd, 0x36, 0x13, 0x75, 0xba, 0xa4, 0x5b, 0xe7, 0xaf, 0xd4, 0xfb, 0x86, 0x16,
	0x00, 0x36, 0xb6, 0xff, 0x10, 0x34, 0xde, 0x0f, 0x20, 0xb7, 0x45, 0xda, 0x83, 0xc3, 0xc4, 0x8a,
	0xfd, 0x9e, 0x64, 0xef, 0xa3, 0x5e, 0x1e, 0xfb, 0xa6, 0x27, 0xef, 0x7c, 0xca, 0x45, 0xc2, 0xff,
	0x1b, 0xc0, 0xeb, 0x3b, 0x45, 0x40, 0x7b, 0xbe, 0x61, 0x51, 0xc5, 0xb4, 0xc7, 0x07, 0xeb, 0x55,
	0x90, 0x96, 0x0c, 0x72, 0x13, 0xdd, 0xc8, 0x09, 0xf2, 0xe4, 0xd9, 0xdf, 0x95, 0x0e, 0x96, 0x2b,
	0x1d, 0x1c, 0xad, 0x74, 0xf0, 0x73, 0xad, 0x57, 0x96, 0x6b, 0xbd, 0xf2, 0x7f, 0xad, 0x57, 0xde,
	0xf4, 0xa7, 0x54, 0x7c, 0x88, 0x1c, 0xec, 0xb2, 0x4f, 0x4a, 0x78, 0xd7, 0xb3, 0xd9, 0x99, 0xc7,
	0xe7, 0xb4, 0x8b, 0x53, 0x93, 0x1f, 0x9c, 0xfb, 0x27, 0x01, 0x00, 0x00, 0xff, 0xff, 0xad, 0x07,
	0x5a, 0x1c, 0xef, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	CredentialIssuer(ctx context.Context, in *QueryCredentialIssuerRequest, opts ...grpc.CallOption) (*QueryCredentialIssuerResponse, error)
	// RevocationList fetch the revocation list for an issuer
	RevocationList(ctx context.Context, in *QueryRevocationListRequest, opts ...grpc.CallOption) (*QueryRevocationListResponse, error)
	PublicCredentials(ctx context.Context, in *QueryPublicCredentialsRequest, opts ...grpc.CallOption) (*QueryPublicCredentialsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CredentialIssuer(ctx context.Context, in *QueryCredentialIssuerRequest, opts ...grpc.CallOption) (*QueryCredentialIssuerResponse, error) {
	out := new(QueryCredentialIssuerResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Query/CredentialIssuer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RevocationList(ctx context.Context, in *QueryRevocationListRequest, opts ...grpc.CallOption) (*QueryRevocationListResponse, error) {
	out := new(QueryRevocationListResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Query/RevocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PublicCredentials(ctx context.Context, in *QueryPublicCredentialsRequest, opts ...grpc.CallOption) (*QueryPublicCredentialsResponse, error) {
	out := new(QueryPublicCredentialsResponse)
	err := c.cc.Invoke(ctx, "/elestodao.elesto.credentials.v1.Query/PublicCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	CredentialIssuer(context.Context, *QueryCredentialIssuerRequest) (*QueryCredentialIssuerResponse, error)
	// RevocationList fetch the revocation list for an issuer
	RevocationList(context.Context, *QueryRevocationListRequest) (*QueryRevocationListResponse, error)
	PublicCredentials(context.Context, *QueryPublicCredentialsRequest) (*QueryPublicCredentialsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CredentialIssuer(ctx context.Context, req *QueryCredentialIssuerRequest) (*QueryCredentialIssuerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialIssuer not implemented")
}
func (*UnimplementedQueryServer) RevocationList(ctx context.Context, req *QueryRevocationListRequest) (*QueryRevocationListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevocationList not implemented")
}
func (*UnimplementedQueryServer) PublicCredentials(ctx context.Context, req *QueryPublicCredentialsRequest) (*QueryPublicCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublicCredentials not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CredentialIssuer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialIssuerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialIssuer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Query/CredentialIssuer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialIssuer(ctx, req.(*QueryCredentialIssuerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RevocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRevocationListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RevocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Query/RevocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RevocationList(ctx, req.(*QueryRevocationListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PublicCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPublicCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PublicCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/elestodao.elesto.credentials.v1.Query/PublicCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PublicCredentials(ctx, req.(*QueryPublicCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "elestodao.elesto.credentials.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CredentialIssuer",
			Handler:    _Query_CredentialIssuer_Handler,
		},
		{
			MethodName: "RevocationList",
			Handler:    _Query_RevocationList_Handler,
		},
		{
			MethodName: "PublicCredentials",
			Handler:    _Query_PublicCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "credentials/v1/query.proto",
}

func (m *QueryCredentialIssuerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialIssuerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialIssuerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialIssuerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialIssuerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialIssuerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Issuer != nil {
		{
			size, err := m.Issuer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevocationListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevocationListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevocationListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRevocationListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRevocationListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRevocationListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RevocationList != nil {
		{
			size, err := m.RevocationList.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPublicCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublicCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublicCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryPublicCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPublicCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPublicCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCredentialIssuerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialIssuerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Issuer != nil {
		l = m.Issuer.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRevocationListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRevocationListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RevocationList != nil {
		l = m.RevocationList.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPublicCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryPublicCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCredentialIssuerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialIssuerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialIssuerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialIssuerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialIssuerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialIssuerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Issuer == nil {
				m.Issuer = &CredentialIssuer{}
			}
			if err := m.Issuer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevocationListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevocationListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevocationListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRevocationListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRevocationListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRevocationListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RevocationList == nil {
				m.RevocationList = &RevocationList{}
			}
			if err := m.RevocationList.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublicCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublicCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublicCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPublicCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPublicCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPublicCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, &PublicVerifiableCredential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
