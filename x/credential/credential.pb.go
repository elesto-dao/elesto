// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: credential/v1/credential.proto

package credential

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredentialDefinition struct {
	// the credential definition did
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the did of the publisher of the credential
	PublisherId string `protobuf:"bytes,2,opt,name=publisherId,proto3" json:"publisherId,omitempty"`
	// The credential data schema.
	// The schema can be large, verbose, and expensive, but must not be compressed since
	// it is used by the msg_server to verify public credentials and if zipped, will open
	// the node to a zip bomb attack vector
	Schema []byte `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// the credential json-ld vocabulary
	// The vocabulary can be large, verbose, and expensive, but must not be compressed since
	// it is used by the msg_server to verify public credentials and if zipped, will open
	// the node to a zip bomb attack vector
	Vocab []byte `protobuf:"bytes,4,opt,name=vocab,proto3" json:"vocab,omitempty"`
	// the human readable name of the credential, must be included
	// in the type of the issued credential
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// the description of the credential, such as it's purpose
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// wherever the credential is intended for public use (on-chain) or not (off-chain)
	// if the value is true, then the module can issue a credential
	// if the value is false, then the module will forbid the issuance of the credential
	IsPublic bool `protobuf:"varint,7,opt,name=isPublic,proto3" json:"isPublic,omitempty"`
	// DID of the credential is replaced by something else
	SupersededBy string `protobuf:"bytes,8,opt,name=supersededBy,proto3" json:"supersededBy,omitempty"`
	// the credential can be de-activated
	IsActive bool `protobuf:"varint,9,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (m *CredentialDefinition) Reset()         { *m = CredentialDefinition{} }
func (m *CredentialDefinition) String() string { return proto.CompactTextString(m) }
func (*CredentialDefinition) ProtoMessage()    {}
func (*CredentialDefinition) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3621c163c80da7, []int{0}
}
func (m *CredentialDefinition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialDefinition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialDefinition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialDefinition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialDefinition.Merge(m, src)
}
func (m *CredentialDefinition) XXX_Size() int {
	return m.Size()
}
func (m *CredentialDefinition) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialDefinition.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialDefinition proto.InternalMessageInfo

// DidMetadata defines metadata associated to a did document such as
// the status of the DID document
type PublicVerifiableCredential struct {
	// json-ld context
	Context []string `protobuf:"bytes,1,rep,name=context,proto3" json:"@context,omitempty"`
	// the credential id
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// the credential types
	Type []string `protobuf:"bytes,3,rep,name=type,proto3" json:"type,omitempty"`
	// the DID of the issuer
	Issuer string `protobuf:"bytes,4,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// the date-time of issuance
	IssuanceDate *time.Time `protobuf:"bytes,5,opt,name=issuanceDate,proto3,stdtime" json:"issuanceDate,omitempty"`
	// the date-time of expiration
	ExpirationDate *time.Time `protobuf:"bytes,6,opt,name=expirationDate,proto3,stdtime" json:"expirationDate,omitempty"`
	// credential status for the revocation lists
	CredentialStatus *CredentialStatus `protobuf:"bytes,7,opt,name=credentialStatus,proto3" json:"credentialStatus,omitempty"`
	// the subject of the credential
	// the preferred way to handle the subject will be to use the Struct type
	// but at the moment is not supported
	// google.protobuf.Struct credentialSubject = 7;
	CredentialSubject []byte `protobuf:"bytes,8,opt,name=credentialSubject,proto3" json:"credentialSubject,omitempty"`
	// One or more cryptographic proofs that can be used to detect tampering
	// and verify the authorship of a credential or presentation. The specific
	// method used for an embedded proof MUST be included using the type property.
	Proof *Proof `protobuf:"bytes,9,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *PublicVerifiableCredential) Reset()         { *m = PublicVerifiableCredential{} }
func (m *PublicVerifiableCredential) String() string { return proto.CompactTextString(m) }
func (*PublicVerifiableCredential) ProtoMessage()    {}
func (*PublicVerifiableCredential) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3621c163c80da7, []int{1}
}
func (m *PublicVerifiableCredential) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PublicVerifiableCredential) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PublicVerifiableCredential.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PublicVerifiableCredential) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PublicVerifiableCredential.Merge(m, src)
}
func (m *PublicVerifiableCredential) XXX_Size() int {
	return m.Size()
}
func (m *PublicVerifiableCredential) XXX_DiscardUnknown() {
	xxx_messageInfo_PublicVerifiableCredential.DiscardUnknown(m)
}

var xxx_messageInfo_PublicVerifiableCredential proto.InternalMessageInfo

// The Proof message represents a cryptographic proof that the
// credential has not been tampered with or changed without the issuers
// knowledge. This message can be used to verify the verifiable credential.
type Proof struct {
	Type               string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Created            string `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	ProofPurpose       string `protobuf:"bytes,3,opt,name=proof_purpose,json=proofPurpose,proto3" json:"proof_purpose,omitempty"`
	VerificationMethod string `protobuf:"bytes,4,opt,name=verification_method,json=verificationMethod,proto3" json:"verification_method,omitempty"`
	Signature          string `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Proof) Reset()         { *m = Proof{} }
func (m *Proof) String() string { return proto.CompactTextString(m) }
func (*Proof) ProtoMessage()    {}
func (*Proof) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3621c163c80da7, []int{2}
}
func (m *Proof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Proof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Proof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Proof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Proof.Merge(m, src)
}
func (m *Proof) XXX_Size() int {
	return m.Size()
}
func (m *Proof) XXX_DiscardUnknown() {
	xxx_messageInfo_Proof.DiscardUnknown(m)
}

var xxx_messageInfo_Proof proto.InternalMessageInfo

// CredentialStatus implement support for bitstring-based revocation lists
// as described here: https://w3c-ccg.github.io/vc-status-rl-2020/#revocationlist2020status
type CredentialStatus struct {
	Id                       string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                     string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	RevocationListIndex      int32  `protobuf:"varint,3,opt,name=revocationListIndex,proto3" json:"revocationListIndex,omitempty"`
	RevocationListCredential string `protobuf:"bytes,4,opt,name=revocationListCredential,proto3" json:"revocationListCredential,omitempty"`
}

func (m *CredentialStatus) Reset()         { *m = CredentialStatus{} }
func (m *CredentialStatus) String() string { return proto.CompactTextString(m) }
func (*CredentialStatus) ProtoMessage()    {}
func (*CredentialStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3621c163c80da7, []int{3}
}
func (m *CredentialStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialStatus.Merge(m, src)
}
func (m *CredentialStatus) XXX_Size() int {
	return m.Size()
}
func (m *CredentialStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialStatus.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialStatus proto.InternalMessageInfo

type ProposePublicCredentialID struct {
	Title                  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description            string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	CredentialDefinitionID string `protobuf:"bytes,3,opt,name=credentialDefinitionID,proto3" json:"credentialDefinitionID,omitempty"`
}

func (m *ProposePublicCredentialID) Reset()         { *m = ProposePublicCredentialID{} }
func (m *ProposePublicCredentialID) String() string { return proto.CompactTextString(m) }
func (*ProposePublicCredentialID) ProtoMessage()    {}
func (*ProposePublicCredentialID) Descriptor() ([]byte, []int) {
	return fileDescriptor_9d3621c163c80da7, []int{4}
}
func (m *ProposePublicCredentialID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposePublicCredentialID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposePublicCredentialID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposePublicCredentialID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposePublicCredentialID.Merge(m, src)
}
func (m *ProposePublicCredentialID) XXX_Size() int {
	return m.Size()
}
func (m *ProposePublicCredentialID) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposePublicCredentialID.DiscardUnknown(m)
}

var xxx_messageInfo_ProposePublicCredentialID proto.InternalMessageInfo

func (m *ProposePublicCredentialID) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProposePublicCredentialID) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProposePublicCredentialID) GetCredentialDefinitionID() string {
	if m != nil {
		return m.CredentialDefinitionID
	}
	return ""
}

func init() {
	proto.RegisterType((*CredentialDefinition)(nil), "elestodao.elesto.credential.v1.CredentialDefinition")
	proto.RegisterType((*PublicVerifiableCredential)(nil), "elestodao.elesto.credential.v1.PublicVerifiableCredential")
	proto.RegisterType((*Proof)(nil), "elestodao.elesto.credential.v1.Proof")
	proto.RegisterType((*CredentialStatus)(nil), "elestodao.elesto.credential.v1.CredentialStatus")
	proto.RegisterType((*ProposePublicCredentialID)(nil), "elestodao.elesto.credential.v1.ProposePublicCredentialID")
}

func init() { proto.RegisterFile("credential/v1/credential.proto", fileDescriptor_9d3621c163c80da7) }

var fileDescriptor_9d3621c163c80da7 = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xf3, 0xd7, 0x64, 0x13, 0xaa, 0xb2, 0xad, 0x2a, 0x13, 0x55, 0x4e, 0x54, 0x04, 0xca,
	0xa1, 0xd8, 0x6d, 0x90, 0x38, 0x94, 0x0b, 0xa4, 0x11, 0x52, 0xa4, 0x22, 0x45, 0x06, 0x71, 0xe0,
	0x52, 0xf9, 0x67, 0x92, 0x2c, 0x8a, 0xbd, 0x96, 0xbd, 0x8e, 0xd2, 0x37, 0x40, 0xe2, 0xd2, 0x27,
	0x40, 0x7d, 0x02, 0x2e, 0xbc, 0x44, 0x8f, 0x3d, 0x72, 0x2a, 0xa8, 0xbd, 0x20, 0x5e, 0x80, 0x2b,
	0xda, 0x5d, 0x3b, 0x71, 0xd3, 0x96, 0xde, 0x66, 0xe6, 0x9b, 0x99, 0xdd, 0xfd, 0xbe, 0x9d, 0x41,
	0x9a, 0x13, 0x82, 0x0b, 0x3e, 0x23, 0xd6, 0xc4, 0x98, 0xee, 0x19, 0x0b, 0x4f, 0x0f, 0x42, 0xca,
	0x28, 0xd6, 0x60, 0x02, 0x11, 0xa3, 0xae, 0x45, 0x75, 0x69, 0xe9, 0x99, 0x94, 0xe9, 0x5e, 0x63,
	0x63, 0x44, 0x47, 0x54, 0xa4, 0x1a, 0xdc, 0x92, 0x55, 0x8d, 0xe6, 0x88, 0xd2, 0xd1, 0x04, 0x0c,
	0xe1, 0xd9, 0xf1, 0xd0, 0x60, 0xc4, 0x83, 0x88, 0x59, 0x5e, 0x90, 0x24, 0x6c, 0x2d, 0x27, 0x44,
	0x2c, 0x8c, 0x1d, 0x26, 0xd1, 0xed, 0xaf, 0x79, 0xb4, 0x71, 0x30, 0x3f, 0xa6, 0x07, 0x43, 0xe2,
	0x13, 0x46, 0xa8, 0x8f, 0x57, 0x51, 0x9e, 0xb8, 0xaa, 0xd2, 0x52, 0xda, 0x55, 0x33, 0x4f, 0x5c,
	0xdc, 0x42, 0xb5, 0x20, 0xb6, 0x27, 0x24, 0x1a, 0x43, 0xd8, 0x77, 0xd5, 0xbc, 0x00, 0xb2, 0x21,
	0xbc, 0x89, 0xca, 0x91, 0x33, 0x06, 0xcf, 0x52, 0x0b, 0x2d, 0xa5, 0x5d, 0x37, 0x13, 0x0f, 0x6f,
	0xa0, 0xd2, 0x94, 0x3a, 0x96, 0xad, 0x16, 0x45, 0x58, 0x3a, 0x18, 0xa3, 0xa2, 0x6f, 0x79, 0xa0,
	0x96, 0x44, 0x23, 0x61, 0xe3, 0xa7, 0xa8, 0xe6, 0x42, 0xe4, 0x84, 0x24, 0xe0, 0x57, 0x50, 0xcb,
	0x1c, 0xea, 0x16, 0xcf, 0x2e, 0x9a, 0x8a, 0x99, 0x05, 0x70, 0x03, 0x55, 0x48, 0x34, 0xe0, 0x47,
	0x3b, 0xea, 0x4a, 0x4b, 0x69, 0x57, 0xcc, 0xb9, 0x8f, 0xdb, 0xa8, 0x1e, 0xc5, 0x01, 0x84, 0x11,
	0xb8, 0xe0, 0x76, 0x8f, 0xd5, 0x4a, 0xa6, 0xc9, 0x35, 0x44, 0x76, 0x79, 0xed, 0x30, 0x32, 0x05,
	0xb5, 0x9a, 0x76, 0x91, 0xfe, 0x7e, 0xe5, 0xf3, 0x69, 0x33, 0xf7, 0xfb, 0xb4, 0xa9, 0x6c, 0xff,
	0x2d, 0xa0, 0x86, 0x6c, 0xfd, 0x01, 0x42, 0x32, 0x24, 0x96, 0x3d, 0x81, 0x05, 0x61, 0x78, 0x17,
	0xad, 0x38, 0xd4, 0x67, 0x30, 0x63, 0xaa, 0xd2, 0x2a, 0xb4, 0xab, 0xdd, 0xcd, 0x3f, 0x17, 0x4d,
	0xfc, 0x2a, 0x89, 0xed, 0x50, 0x8f, 0x30, 0xf0, 0x02, 0x76, 0x6c, 0xa6, 0x69, 0x09, 0xb1, 0xf9,
	0x39, 0xb1, 0x18, 0x15, 0xd9, 0x71, 0x00, 0x6a, 0x81, 0x97, 0x9b, 0xc2, 0xe6, 0x54, 0x92, 0x28,
	0x8a, 0x21, 0x14, 0x9c, 0x55, 0xcd, 0xc4, 0xc3, 0x3d, 0x54, 0xe7, 0x96, 0xe5, 0x3b, 0xd0, 0xb3,
	0x98, 0x24, 0xaf, 0xd6, 0x69, 0xe8, 0x52, 0x62, 0x3d, 0x95, 0x58, 0x7f, 0x9f, 0xfe, 0x81, 0x6e,
	0xf1, 0xe4, 0x27, 0x7f, 0x78, 0xb6, 0x0a, 0x1f, 0xa2, 0x55, 0x98, 0x05, 0x24, 0xb4, 0x38, 0x99,
	0xa2, 0x4f, 0xf9, 0xde, 0x3e, 0x15, 0x4e, 0xa0, 0xe8, 0xb5, 0x54, 0x8b, 0x6d, 0xb4, 0xb6, 0xf8,
	0xa7, 0xef, 0x98, 0xc5, 0xe2, 0x48, 0x88, 0x52, 0xeb, 0xec, 0xea, 0xff, 0xff, 0xd1, 0xfa, 0xc1,
	0x52, 0x5d, 0x22, 0xd3, 0x8d, 0x7e, 0x78, 0x07, 0x3d, 0xcc, 0xc4, 0x62, 0xfb, 0x13, 0x38, 0x4c,
	0x28, 0x5b, 0x37, 0x6f, 0x02, 0xf8, 0x25, 0x2a, 0x05, 0x21, 0xa5, 0x43, 0xa1, 0x6a, 0xad, 0xf3,
	0xe4, 0xbe, 0x6b, 0x0c, 0x78, 0xb2, 0x29, 0x6b, 0x32, 0xca, 0x7f, 0x57, 0x50, 0x49, 0x40, 0x73,
	0x89, 0xe4, 0x34, 0x48, 0x89, 0x54, 0xb4, 0xe2, 0x84, 0x60, 0x31, 0x48, 0xb5, 0x4c, 0x5d, 0xfc,
	0x18, 0x3d, 0x10, 0xad, 0x8e, 0x82, 0x38, 0x0c, 0x68, 0x04, 0x62, 0x1c, 0xaa, 0x66, 0x5d, 0x04,
	0x07, 0x32, 0x86, 0x0d, 0xb4, 0x3e, 0x15, 0xff, 0xc9, 0x11, 0x4c, 0x1e, 0x79, 0xc0, 0xc6, 0xd4,
	0x4d, 0xe4, 0xc6, 0x59, 0xe8, 0xad, 0x40, 0xf0, 0x16, 0xaa, 0x46, 0x64, 0xe4, 0x5b, 0x2c, 0x0e,
	0xd3, 0xa1, 0x59, 0x04, 0x32, 0xb7, 0xfe, 0xa6, 0xa0, 0xb5, 0x65, 0x5e, 0x6f, 0x0c, 0x73, 0xfa,
	0xa0, 0x7c, 0xe6, 0x41, 0xbb, 0x68, 0x3d, 0x04, 0x3e, 0x9b, 0xfc, 0xd0, 0x43, 0x12, 0xb1, 0xbe,
	0xef, 0xc2, 0x4c, 0x5c, 0xbe, 0x64, 0xde, 0x06, 0xe1, 0x7d, 0xa4, 0x5e, 0x0f, 0x2f, 0xce, 0x4d,
	0x1e, 0x72, 0x27, 0x9e, 0xb9, 0xf0, 0x17, 0x05, 0x3d, 0x1a, 0x84, 0x94, 0xb3, 0x22, 0xe7, 0x6c,
	0x91, 0xd5, 0xef, 0xf1, 0xe5, 0xc1, 0x08, 0x9b, 0xa4, 0xdc, 0x4b, 0x87, 0x2f, 0xa3, 0xec, 0xa2,
	0x48, 0x96, 0x51, 0x76, 0x45, 0xbc, 0x40, 0x9b, 0xce, 0x2d, 0x6b, 0xad, 0xdf, 0x4b, 0xd4, 0xb8,
	0x03, 0xed, 0xbe, 0x39, 0xbb, 0xd4, 0x94, 0xf3, 0x4b, 0x4d, 0xf9, 0x75, 0xa9, 0x29, 0x27, 0x57,
	0x5a, 0xee, 0xfc, 0x4a, 0xcb, 0xfd, 0xb8, 0xd2, 0x72, 0x1f, 0x77, 0x46, 0x84, 0x8d, 0x63, 0x5b,
	0x77, 0xa8, 0x67, 0xc8, 0x6f, 0xf4, 0xcc, 0xb5, 0x68, 0x62, 0x1a, 0xd3, 0x8e, 0x31, 0xcb, 0xac,
	0x74, 0xbb, 0x2c, 0x66, 0xe8, 0xf9, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0x60, 0xfe, 0x77,
	0xf5, 0x05, 0x00, 0x00,
}

func (this *CredentialDefinition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialDefinition)
	if !ok {
		that2, ok := that.(CredentialDefinition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.PublisherId != that1.PublisherId {
		return false
	}
	if !bytes.Equal(this.Schema, that1.Schema) {
		return false
	}
	if !bytes.Equal(this.Vocab, that1.Vocab) {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.IsPublic != that1.IsPublic {
		return false
	}
	if this.SupersededBy != that1.SupersededBy {
		return false
	}
	if this.IsActive != that1.IsActive {
		return false
	}
	return true
}
func (this *PublicVerifiableCredential) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PublicVerifiableCredential)
	if !ok {
		that2, ok := that.(PublicVerifiableCredential)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Context) != len(that1.Context) {
		return false
	}
	for i := range this.Context {
		if this.Context[i] != that1.Context[i] {
			return false
		}
	}
	if this.Id != that1.Id {
		return false
	}
	if len(this.Type) != len(that1.Type) {
		return false
	}
	for i := range this.Type {
		if this.Type[i] != that1.Type[i] {
			return false
		}
	}
	if this.Issuer != that1.Issuer {
		return false
	}
	if that1.IssuanceDate == nil {
		if this.IssuanceDate != nil {
			return false
		}
	} else if !this.IssuanceDate.Equal(*that1.IssuanceDate) {
		return false
	}
	if that1.ExpirationDate == nil {
		if this.ExpirationDate != nil {
			return false
		}
	} else if !this.ExpirationDate.Equal(*that1.ExpirationDate) {
		return false
	}
	if !this.CredentialStatus.Equal(that1.CredentialStatus) {
		return false
	}
	if !bytes.Equal(this.CredentialSubject, that1.CredentialSubject) {
		return false
	}
	if !this.Proof.Equal(that1.Proof) {
		return false
	}
	return true
}
func (this *Proof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Proof)
	if !ok {
		that2, ok := that.(Proof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.Created != that1.Created {
		return false
	}
	if this.ProofPurpose != that1.ProofPurpose {
		return false
	}
	if this.VerificationMethod != that1.VerificationMethod {
		return false
	}
	if this.Signature != that1.Signature {
		return false
	}
	return true
}
func (this *CredentialStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CredentialStatus)
	if !ok {
		that2, ok := that.(CredentialStatus)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.RevocationListIndex != that1.RevocationListIndex {
		return false
	}
	if this.RevocationListCredential != that1.RevocationListCredential {
		return false
	}
	return true
}
func (m *CredentialDefinition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialDefinition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialDefinition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsActive {
		i--
		if m.IsActive {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.SupersededBy) > 0 {
		i -= len(m.SupersededBy)
		copy(dAtA[i:], m.SupersededBy)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.SupersededBy)))
		i--
		dAtA[i] = 0x42
	}
	if m.IsPublic {
		i--
		if m.IsPublic {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Vocab) > 0 {
		i -= len(m.Vocab)
		copy(dAtA[i:], m.Vocab)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Vocab)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Schema) > 0 {
		i -= len(m.Schema)
		copy(dAtA[i:], m.Schema)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Schema)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PublisherId) > 0 {
		i -= len(m.PublisherId)
		copy(dAtA[i:], m.PublisherId)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.PublisherId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PublicVerifiableCredential) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PublicVerifiableCredential) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PublicVerifiableCredential) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CredentialSubject) > 0 {
		i -= len(m.CredentialSubject)
		copy(dAtA[i:], m.CredentialSubject)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.CredentialSubject)))
		i--
		dAtA[i] = 0x42
	}
	if m.CredentialStatus != nil {
		{
			size, err := m.CredentialStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredential(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.ExpirationDate != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.ExpirationDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpirationDate):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintCredential(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x32
	}
	if m.IssuanceDate != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.IssuanceDate, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintCredential(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		for iNdEx := len(m.Type) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Type[iNdEx])
			copy(dAtA[i:], m.Type[iNdEx])
			i = encodeVarintCredential(dAtA, i, uint64(len(m.Type[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Context) > 0 {
		for iNdEx := len(m.Context) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Context[iNdEx])
			copy(dAtA[i:], m.Context[iNdEx])
			i = encodeVarintCredential(dAtA, i, uint64(len(m.Context[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Proof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Proof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Proof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.VerificationMethod) > 0 {
		i -= len(m.VerificationMethod)
		copy(dAtA[i:], m.VerificationMethod)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.VerificationMethod)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ProofPurpose) > 0 {
		i -= len(m.ProofPurpose)
		copy(dAtA[i:], m.ProofPurpose)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.ProofPurpose)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RevocationListCredential) > 0 {
		i -= len(m.RevocationListCredential)
		copy(dAtA[i:], m.RevocationListCredential)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.RevocationListCredential)))
		i--
		dAtA[i] = 0x22
	}
	if m.RevocationListIndex != 0 {
		i = encodeVarintCredential(dAtA, i, uint64(m.RevocationListIndex))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposePublicCredentialID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposePublicCredentialID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposePublicCredentialID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialDefinitionID) > 0 {
		i -= len(m.CredentialDefinitionID)
		copy(dAtA[i:], m.CredentialDefinitionID)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.CredentialDefinitionID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCredential(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCredential(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredential(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialDefinition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.PublisherId)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Schema)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Vocab)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.IsPublic {
		n += 2
	}
	l = len(m.SupersededBy)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.IsActive {
		n += 2
	}
	return n
}

func (m *PublicVerifiableCredential) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Context) > 0 {
		for _, s := range m.Context {
			l = len(s)
			n += 1 + l + sovCredential(uint64(l))
		}
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if len(m.Type) > 0 {
		for _, s := range m.Type {
			l = len(s)
			n += 1 + l + sovCredential(uint64(l))
		}
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.IssuanceDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.IssuanceDate)
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.ExpirationDate != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.ExpirationDate)
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.CredentialStatus != nil {
		l = m.CredentialStatus.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.CredentialSubject)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func (m *Proof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.ProofPurpose)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.VerificationMethod)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func (m *CredentialStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	if m.RevocationListIndex != 0 {
		n += 1 + sovCredential(uint64(m.RevocationListIndex))
	}
	l = len(m.RevocationListCredential)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func (m *ProposePublicCredentialID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	l = len(m.CredentialDefinitionID)
	if l > 0 {
		n += 1 + l + sovCredential(uint64(l))
	}
	return n
}

func sovCredential(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredential(x uint64) (n int) {
	return sovCredential(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredentialDefinition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialDefinition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialDefinition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublisherId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublisherId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Schema = append(m.Schema[:0], dAtA[iNdEx:postIndex]...)
			if m.Schema == nil {
				m.Schema = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vocab", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vocab = append(m.Vocab[:0], dAtA[iNdEx:postIndex]...)
			if m.Vocab == nil {
				m.Vocab = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPublic", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPublic = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupersededBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupersededBy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsActive", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsActive = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PublicVerifiableCredential) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PublicVerifiableCredential: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PublicVerifiableCredential: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Context", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Context = append(m.Context, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = append(m.Type, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IssuanceDate == nil {
				m.IssuanceDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.IssuanceDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationDate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpirationDate == nil {
				m.ExpirationDate = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.ExpirationDate, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatus == nil {
				m.CredentialStatus = &CredentialStatus{}
			}
			if err := m.CredentialStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSubject", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSubject = append(m.CredentialSubject[:0], dAtA[iNdEx:postIndex]...)
			if m.CredentialSubject == nil {
				m.CredentialSubject = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Proof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Proof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Proof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPurpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofPurpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationListIndex", wireType)
			}
			m.RevocationListIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RevocationListIndex |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RevocationListCredential", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RevocationListCredential = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposePublicCredentialID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposePublicCredentialID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposePublicCredentialID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialDefinitionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredential
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredential
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialDefinitionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredential(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredential
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredential(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredential
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredential
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredential
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredential
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredential
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredential        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredential          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredential = fmt.Errorf("proto: unexpected end of group")
)
