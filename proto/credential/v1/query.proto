syntax = "proto3";
package elestodao.elesto.credential.v1;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "credential/v1/credential.proto";
// import "gogoproto/gogo.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/elesto-dao/elesto/v3/x/credential";

// this line is used by starport scaffolding # 1

// Query defines the gRPC querier service.
service Query {

  // TODO: to remove in favour of a third party service that indexes the credential
  // PublicCredentials
  rpc PublicCredentials(QueryPublicCredentialsRequest) returns (QueryPublicCredentialsResponse) {
    option (google.api.http).get = "/elesto/credentials";
  }

  // PublicCredentials
  rpc PublicCredential(QueryPublicCredentialRequest) returns (QueryPublicCredentialResponse) {
    option (google.api.http).get = "/elesto/credentials/{id}";
  }

  rpc PublicCredentialsByHolder(QueryPublicCredentialsByHolderRequest) returns (QueryPublicCredentialsByHolderResponse) {
    option (google.api.http).get = "/elesto/credentials/holder/{did}";
  }

  rpc PublicCredentialsByIssuer(QueryPublicCredentialsByIssuerRequest) returns (QueryPublicCredentialsByIssuerResponse) {
    option (google.api.http).get = "/elesto/credentials/issuer/{did}";
  }

  // TODO: to remove in favor of a 3rd party service that indexes the definitions
  // CredentialDefinition
  rpc CredentialDefinitions(QueryCredentialDefinitionsRequest) returns (QueryCredentialDefinitionsResponse) {
    option (google.api.http).get = "/elesto/credential/definitions";
  }

  // CredentialDefinition
  rpc CredentialDefinition(QueryCredentialDefinitionRequest) returns (QueryCredentialDefinitionResponse) {
    option (google.api.http).get = "/elesto/credential/definitions/{id}";
  }

  rpc CredentialDefinitionsByPublisher(QueryCredentialDefinitionsByPublisherRequest) returns (QueryCredentialDefinitionsByPublisherResponse) {
    option (google.api.http).get = "/elesto/credential/definitions/publisher/{did}";
  }
}

message QueryPublicCredentialRequest {
  string id = 1;
}

message QueryPublicCredentialResponse {
  PublicVerifiableCredential credential = 1;
}


message QueryPublicCredentialsRequest {}

message QueryPublicCredentialsResponse {
  repeated PublicVerifiableCredential credential = 1;
}

message QueryPublicCredentialsByHolderRequest {
  string did = 1; // holder DID
}

message QueryPublicCredentialsByHolderResponse {
  repeated PublicVerifiableCredential credential = 1;
}

message QueryPublicCredentialsByIssuerRequest {
  string did = 1; // issuer DID
}

message QueryPublicCredentialsByIssuerResponse {
  repeated PublicVerifiableCredential credential = 1;
}

message QueryCredentialDefinitionRequest {
  string id = 1; // id of the credential definition
}

message QueryCredentialDefinitionResponse {
  CredentialDefinition definition = 1;
}

message QueryCredentialDefinitionsRequest {
    cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryCredentialDefinitionsResponse {
  repeated CredentialDefinition definitions = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCredentialDefinitionsByPublisherRequest {
  string did = 1; // DID of the publisher
}

message QueryCredentialDefinitionsByPublisherResponse {
  repeated CredentialDefinition definitions = 1;
}






// this line is used by starport scaffolding # 3
