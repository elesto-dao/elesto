syntax = "proto3";
package elestodao.elesto.credentials.v1;

option go_package = "github.com/elesto-dao/elesto/x/credentials";

import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";

message CredentialIssuer {
  // the did of the issuer
  string did = 1;

  // the list of the credential that this issuer issues
  repeated CredentialIssuance   issues = 3;

  // the list of off-chain credentials that this issuer accepts
  repeated CredentialConstraint accepts = 4;
}

message CredentialIssuance {
  // the did of the credential definition
  string credentialDefinition = 1;

  // the constraints required for issuing the credential
  repeated CredentialConstraint requirements = 2;
}


message CredentialConstraint {
  // id of the required credential
  string requireCredentialDefinition =1;

  // id of the issuer that must be the issuer of the credential
  string fromIssuer = 2;
}


message CredentialDefinition {

  // the credential definition did
  string id = 1;

  // the did of the publisher of the credential
  string publisherId = 2;

  // the credential json-ld schema
  string schema =3;

  // the credential vocabulary
  string vocab = 4;

  // the human readable name of the credential
  string name = 5;

  // the description of the credential, such as it's purpose
  string description = 6;

  // wherever the credential is intended for public use (on-chain) or not (off-chain)
  // if the value is false then the module will forbid the issuance of the credential on chain
  bool isPublic = 7;


  // did of the credential should not be used anymore in favour of something else
  string supersededBy = 11;

  // the credential can be de-activated
  bool isActive = 12;

}



// DidMetadata defines metadata associated to a did document such as
// the status of the DID document
message PublicVerifiableCredential {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters)  = false;

  // the credential id
  string id                   = 1;

  // the definition
  string definition           = 2;

  // the
  string issuer =  3;

  // the subject of the credential
  repeated google.protobuf.Any subject = 4;

  // the date-time of issuance
  google.protobuf.Timestamp issuedOn = 5 [(gogoproto.stdtime) = true];

  // the date-time of expiration
  google.protobuf.Timestamp expiresOn = 6 [(gogoproto.stdtime) = true];

}


